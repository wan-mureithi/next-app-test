/* This file is automatically generated by ABP framework to use MVC Controllers from javascript. */


// module treasuryService

(function(){

  // controller nashServices.treasuryService.virtualAccounts.virtualAccount

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.virtualAccounts.virtualAccount');

    nashServices.treasuryService.virtualAccounts.virtualAccount.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/virtual-accounts' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'accountName', value: input.accountName }, { name: 'accountNumber', value: input.accountNumber }, { name: 'currencyId', value: input.currencyId }, { name: 'parentVirtualAccountId', value: input.parentVirtualAccountId }, { name: 'businessId', value: input.businessId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.virtualAccounts.virtualAccount.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/virtual-accounts/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.virtualAccounts.virtualAccount.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/virtual-accounts/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.virtualAccounts.virtualAccount.getCurrencyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/virtual-accounts/currency-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.virtualAccounts.virtualAccount.getVirtualAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/virtual-accounts/virtual-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.virtualAccounts.virtualAccount.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/virtual-accounts/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.virtualAccounts.virtualAccount.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/virtual-accounts',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.virtualAccounts.virtualAccount.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/virtual-accounts/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.virtualAccounts.virtualAccount['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/virtual-accounts/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.virtualAccounts.virtualAccount.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/virtual-accounts/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'accountName', value: input.accountName }, { name: 'accountNumber', value: input.accountNumber }, { name: 'currencyId', value: input.currencyId }, { name: 'parentVirtualAccountId', value: input.parentVirtualAccountId }, { name: 'businessId', value: input.businessId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.virtualAccounts.virtualAccount.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/virtual-accounts/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.vendors.vendor

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.vendors.vendor');

    nashServices.treasuryService.vendors.vendor.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendors' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'vendorBusinessName', value: input.vendorBusinessName }, { name: 'name', value: input.name }, { name: 'contactPersonName', value: input.contactPersonName }, { name: 'synced', value: input.synced }, { name: 'syncAttemptsMin', value: input.syncAttemptsMin }, { name: 'syncAttemptsMax', value: input.syncAttemptsMax }, { name: 'syncDateMin', value: input.syncDateMin }, { name: 'syncDateMax', value: input.syncDateMax }, { name: 'syncIdentifier', value: input.syncIdentifier }, { name: 'syncERPIdentifier', value: input.syncERPIdentifier }, { name: 'errors', value: input.errors }, { name: 'vendorType', value: input.vendorType }, { name: 'businessId', value: input.businessId }, { name: 'globalAccountId', value: input.globalAccountId }, { name: 'virtualAccountId', value: input.virtualAccountId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendors.vendor.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendors/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendors.vendor.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendors/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendors.vendor.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendors/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendors.vendor.getGlobalAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendors/global-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendors.vendor.getVirtualAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendors/virtual-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendors.vendor.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendors',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.vendors.vendor.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendors/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.vendors.vendor['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendors/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.vendors.vendor.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendors/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'vendorBusinessName', value: input.vendorBusinessName }, { name: 'name', value: input.name }, { name: 'contactPersonName', value: input.contactPersonName }, { name: 'synced', value: input.synced }, { name: 'syncAttemptsMin', value: input.syncAttemptsMin }, { name: 'syncAttemptsMax', value: input.syncAttemptsMax }, { name: 'syncDateMin', value: input.syncDateMin }, { name: 'syncDateMax', value: input.syncDateMax }, { name: 'syncIdentifier', value: input.syncIdentifier }, { name: 'syncERPIdentifier', value: input.syncERPIdentifier }, { name: 'errors', value: input.errors }, { name: 'vendorType', value: input.vendorType }, { name: 'businessId', value: input.businessId }, { name: 'globalAccountId', value: input.globalAccountId }, { name: 'virtualAccountId', value: input.virtualAccountId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendors.vendor.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendors/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.vendorPartyAccounts.vendorPartyAccount

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.vendorPartyAccounts.vendorPartyAccount');

    nashServices.treasuryService.vendorPartyAccounts.vendorPartyAccount.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-party-accounts' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'accountNo', value: input.accountNo }, { name: 'accountName', value: input.accountName }, { name: 'vendorId', value: input.vendorId }, { name: 'bankId', value: input.bankId }, { name: 'branchId', value: input.branchId }, { name: 'businessId', value: input.businessId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorPartyAccounts.vendorPartyAccount.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-party-accounts/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorPartyAccounts.vendorPartyAccount.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-party-accounts/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorPartyAccounts.vendorPartyAccount.getVendorLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-party-accounts/vendor-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorPartyAccounts.vendorPartyAccount.getBankLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-party-accounts/bank-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorPartyAccounts.vendorPartyAccount.getBranchLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-party-accounts/branch-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorPartyAccounts.vendorPartyAccount.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-party-accounts/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorPartyAccounts.vendorPartyAccount.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-party-accounts',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorPartyAccounts.vendorPartyAccount.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-party-accounts/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorPartyAccounts.vendorPartyAccount['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-party-accounts/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorPartyAccounts.vendorPartyAccount.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-party-accounts/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'accountNo', value: input.accountNo }, { name: 'accountName', value: input.accountName }, { name: 'vendorId', value: input.vendorId }, { name: 'bankId', value: input.bankId }, { name: 'branchId', value: input.branchId }, { name: 'businessId', value: input.businessId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorPartyAccounts.vendorPartyAccount.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-party-accounts/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.vendorAppFiles.vendorAppFile

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.vendorAppFiles.vendorAppFile');

    nashServices.treasuryService.vendorAppFiles.vendorAppFile.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-app-files' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'fileName', value: input.fileName }, { name: 'fileExtension', value: input.fileExtension }, { name: 'passwordProtected', value: input.passwordProtected }, { name: 'description', value: input.description }, { name: 'password', value: input.password }, { name: 'vendorId', value: input.vendorId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorAppFiles.vendorAppFile.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-app-files/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorAppFiles.vendorAppFile.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-app-files/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorAppFiles.vendorAppFile.getVendorLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-app-files/vendor-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorAppFiles.vendorAppFile.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-app-files',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorAppFiles.vendorAppFile.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-app-files/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorAppFiles.vendorAppFile['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-app-files/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorAppFiles.vendorAppFile.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-app-files/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'fileName', value: input.fileName }, { name: 'fileExtension', value: input.fileExtension }, { name: 'passwordProtected', value: input.passwordProtected }, { name: 'description', value: input.description }, { name: 'password', value: input.password }, { name: 'vendorId', value: input.vendorId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorAppFiles.vendorAppFile.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-app-files/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.vendorAccountHolders.vendorAccountHolder

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.vendorAccountHolders.vendorAccountHolder');

    nashServices.treasuryService.vendorAccountHolders.vendorAccountHolder.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-account-holders' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'reference', value: input.reference }, { name: 'vendorId', value: input.vendorId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorAccountHolders.vendorAccountHolder.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-account-holders/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorAccountHolders.vendorAccountHolder.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-account-holders/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorAccountHolders.vendorAccountHolder.getVendorLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-account-holders/vendor-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorAccountHolders.vendorAccountHolder.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-account-holders',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorAccountHolders.vendorAccountHolder.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-account-holders/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorAccountHolders.vendorAccountHolder['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-account-holders/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorAccountHolders.vendorAccountHolder.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-account-holders/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'reference', value: input.reference }, { name: 'vendorId', value: input.vendorId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.vendorAccountHolders.vendorAccountHolder.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/vendor-account-holders/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.unitOfMeasures.unitOfMeasure

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.unitOfMeasures.unitOfMeasure');

    nashServices.treasuryService.unitOfMeasures.unitOfMeasure.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/unit-of-measures' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'unit', value: input.unit }, { name: 'code', value: input.code }, { name: 'businessId', value: input.businessId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.unitOfMeasures.unitOfMeasure.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/unit-of-measures/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.unitOfMeasures.unitOfMeasure.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/unit-of-measures/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.unitOfMeasures.unitOfMeasure.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/unit-of-measures/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.unitOfMeasures.unitOfMeasure.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/unit-of-measures',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.unitOfMeasures.unitOfMeasure.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/unit-of-measures/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.unitOfMeasures.unitOfMeasure['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/unit-of-measures/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.unitOfMeasures.unitOfMeasure.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/unit-of-measures/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'unit', value: input.unit }, { name: 'code', value: input.code }, { name: 'businessId', value: input.businessId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.unitOfMeasures.unitOfMeasure.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/unit-of-measures/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.transactions.transaction

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.transactions.transaction');

    nashServices.treasuryService.transactions.transaction.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/transactions' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'documentNumber', value: input.documentNumber }, { name: 'description', value: input.description }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'chargeMin', value: input.chargeMin }, { name: 'chargeMax', value: input.chargeMax }, { name: 'paymentMode', value: input.paymentMode }, { name: 'transactionType', value: input.transactionType }, { name: 'processingTransactionType', value: input.processingTransactionType }, { name: 'accountHolderFromType', value: input.accountHolderFromType }, { name: 'accountHolderToType', value: input.accountHolderToType }, { name: 'paymentStatus', value: input.paymentStatus }, { name: 'amountPaid', value: input.amountPaid }, { name: 'invoiceId', value: input.invoiceId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.transactions.transaction.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/transactions/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.transactions.transaction.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/transactions/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.transactions.transaction.getInvoiceLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/transactions/invoice-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.transactions.transaction.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/transactions',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.transactions.transaction.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/transactions/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.transactions.transaction['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/transactions/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.transactions.transaction.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/transactions/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'documentNumber', value: input.documentNumber }, { name: 'description', value: input.description }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'chargeMin', value: input.chargeMin }, { name: 'chargeMax', value: input.chargeMax }, { name: 'paymentMode', value: input.paymentMode }, { name: 'transactionType', value: input.transactionType }, { name: 'processingTransactionType', value: input.processingTransactionType }, { name: 'accountHolderFromType', value: input.accountHolderFromType }, { name: 'accountHolderToType', value: input.accountHolderToType }, { name: 'paymentStatus', value: input.paymentStatus }, { name: 'amountPaid', value: input.amountPaid }, { name: 'invoiceId', value: input.invoiceId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.transactions.transaction.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/transactions/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.services.service

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.services.service');

    nashServices.treasuryService.services.service.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/services' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'priceMin', value: input.priceMin }, { name: 'priceMax', value: input.priceMax }, { name: 'description', value: input.description }, { name: 'code', value: input.code }, { name: 'isSynced', value: input.isSynced }, { name: 'syncDateMin', value: input.syncDateMin }, { name: 'syncDateMax', value: input.syncDateMax }, { name: 'syncIdentifier', value: input.syncIdentifier }, { name: 'syncERPIdentifier', value: input.syncERPIdentifier }, { name: 'businessId', value: input.businessId }, { name: 'currencyId', value: input.currencyId }, { name: 'unitOfMeasureId', value: input.unitOfMeasureId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.services.service.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/services/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.services.service.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/services/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.services.service.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/services/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.services.service.getCurrencyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/services/currency-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.services.service.getUnitOfMeasureLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/services/unit-of-measure-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.services.service.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/services',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.services.service.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/services/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.services.service['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/services/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.services.service.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/services/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'priceMin', value: input.priceMin }, { name: 'priceMax', value: input.priceMax }, { name: 'description', value: input.description }, { name: 'code', value: input.code }, { name: 'isSynced', value: input.isSynced }, { name: 'syncDateMin', value: input.syncDateMin }, { name: 'syncDateMax', value: input.syncDateMax }, { name: 'syncIdentifier', value: input.syncIdentifier }, { name: 'syncERPIdentifier', value: input.syncERPIdentifier }, { name: 'businessId', value: input.businessId }, { name: 'currencyId', value: input.currencyId }, { name: 'unitOfMeasureId', value: input.unitOfMeasureId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.services.service.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/services/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.products.product

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.products.product');

    nashServices.treasuryService.products.product.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/products' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'productCode', value: input.productCode }, { name: 'stockQuantityMin', value: input.stockQuantityMin }, { name: 'stockQuantityMax', value: input.stockQuantityMax }, { name: 'buyingPriceMin', value: input.buyingPriceMin }, { name: 'buyingPriceMax', value: input.buyingPriceMax }, { name: 'sellingPriceMin', value: input.sellingPriceMin }, { name: 'sellingPriceMax', value: input.sellingPriceMax }, { name: 'isSellable', value: input.isSellable }, { name: 'isBuyable', value: input.isBuyable }, { name: 'isSynced', value: input.isSynced }, { name: 'syncDateMin', value: input.syncDateMin }, { name: 'syncDateMax', value: input.syncDateMax }, { name: 'syncIdentifier', value: input.syncIdentifier }, { name: 'syncERPIdentifier', value: input.syncERPIdentifier }, { name: 'businessId', value: input.businessId }, { name: 'currencyId', value: input.currencyId }, { name: 'unitOfMeasureId', value: input.unitOfMeasureId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.products.product.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/products/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.products.product.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/products/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.products.product.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/products/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.products.product.getCurrencyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/products/currency-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.products.product.getUnitOfMeasureLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/products/unit-of-measure-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.products.product.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/products',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.products.product.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/products/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.products.product['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/products/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.products.product.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/products/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'productCode', value: input.productCode }, { name: 'stockQuantityMin', value: input.stockQuantityMin }, { name: 'stockQuantityMax', value: input.stockQuantityMax }, { name: 'buyingPriceMin', value: input.buyingPriceMin }, { name: 'buyingPriceMax', value: input.buyingPriceMax }, { name: 'sellingPriceMin', value: input.sellingPriceMin }, { name: 'sellingPriceMax', value: input.sellingPriceMax }, { name: 'isSellable', value: input.isSellable }, { name: 'isBuyable', value: input.isBuyable }, { name: 'isSynced', value: input.isSynced }, { name: 'syncDateMin', value: input.syncDateMin }, { name: 'syncDateMax', value: input.syncDateMax }, { name: 'syncIdentifier', value: input.syncIdentifier }, { name: 'syncERPIdentifier', value: input.syncERPIdentifier }, { name: 'businessId', value: input.businessId }, { name: 'currencyId', value: input.currencyId }, { name: 'unitOfMeasureId', value: input.unitOfMeasureId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.products.product.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/products/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.payments.payment

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.payments.payment');

    nashServices.treasuryService.payments.payment.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payments' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'amountReceivableMin', value: input.amountReceivableMin }, { name: 'amountReceivableMax', value: input.amountReceivableMax }, { name: 'paymentDateMin', value: input.paymentDateMin }, { name: 'paymentDateMax', value: input.paymentDateMax }, { name: 'referenceNo', value: input.referenceNo }, { name: 'paymentModeMin', value: input.paymentModeMin }, { name: 'paymentModeMax', value: input.paymentModeMax }, { name: 'currencyId', value: input.currencyId }, { name: 'partyId', value: input.partyId }, { name: 'invoiceId', value: input.invoiceId }, { name: 'billId', value: input.billId }, { name: 'businessId', value: input.businessId }, { name: 'globalAccountId', value: input.globalAccountId }, { name: 'virtualAccountId', value: input.virtualAccountId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.payments.payment.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payments/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.payments.payment.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payments/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.payments.payment.getCurrencyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payments/currency-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.payments.payment.getPartyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payments/party-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.payments.payment.getInvoiceLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payments/invoice-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.payments.payment.getBillLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payments/bill-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.payments.payment.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payments/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.payments.payment.getGlobalAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payments/global-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.payments.payment.getVirtualAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payments/virtual-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.payments.payment.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payments',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.payments.payment.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payments/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.payments.payment['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payments/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.payments.payment.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payments/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'amountReceivableMin', value: input.amountReceivableMin }, { name: 'amountReceivableMax', value: input.amountReceivableMax }, { name: 'paymentDateMin', value: input.paymentDateMin }, { name: 'paymentDateMax', value: input.paymentDateMax }, { name: 'referenceNo', value: input.referenceNo }, { name: 'paymentModeMin', value: input.paymentModeMin }, { name: 'paymentModeMax', value: input.paymentModeMax }, { name: 'currencyId', value: input.currencyId }, { name: 'partyId', value: input.partyId }, { name: 'invoiceId', value: input.invoiceId }, { name: 'billId', value: input.billId }, { name: 'businessId', value: input.businessId }, { name: 'globalAccountId', value: input.globalAccountId }, { name: 'virtualAccountId', value: input.virtualAccountId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.payments.payment.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payments/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.paymentRequests.paymentRequest

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.paymentRequests.paymentRequest');

    nashServices.treasuryService.paymentRequests.paymentRequest.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-requests' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'description', value: input.description }, { name: 'paymentRequestDateMin', value: input.paymentRequestDateMin }, { name: 'paymentRequestDateMax', value: input.paymentRequestDateMax }, { name: 'paymentRequestExecutionDateMin', value: input.paymentRequestExecutionDateMin }, { name: 'paymentRequestExecutionDateMax', value: input.paymentRequestExecutionDateMax }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentRequests.paymentRequest.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-requests/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentRequests.paymentRequest.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-requests',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentRequests.paymentRequest.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-requests/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentRequests.paymentRequest['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-requests/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentRequests.paymentRequest.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-requests/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'description', value: input.description }, { name: 'paymentRequestDateMin', value: input.paymentRequestDateMin }, { name: 'paymentRequestDateMax', value: input.paymentRequestDateMax }, { name: 'paymentRequestExecutionDateMin', value: input.paymentRequestExecutionDateMin }, { name: 'paymentRequestExecutionDateMax', value: input.paymentRequestExecutionDateMax }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentRequests.paymentRequest.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-requests/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.paymentReceipts.paymentReceipt

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.paymentReceipts.paymentReceipt');

    nashServices.treasuryService.paymentReceipts.paymentReceipt.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-receipts' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'amountReceivableMin', value: input.amountReceivableMin }, { name: 'amountReceivableMax', value: input.amountReceivableMax }, { name: 'paymentDateMin', value: input.paymentDateMin }, { name: 'paymentDateMax', value: input.paymentDateMax }, { name: 'referenceNo', value: input.referenceNo }, { name: 'paymentModeMin', value: input.paymentModeMin }, { name: 'paymentModeMax', value: input.paymentModeMax }, { name: 'paymentId', value: input.paymentId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentReceipts.paymentReceipt.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-receipts/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentReceipts.paymentReceipt.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-receipts/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentReceipts.paymentReceipt.getPaymentLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-receipts/payment-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentReceipts.paymentReceipt.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-receipts',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentReceipts.paymentReceipt.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-receipts/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentReceipts.paymentReceipt['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-receipts/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentReceipts.paymentReceipt.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-receipts/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'amountReceivableMin', value: input.amountReceivableMin }, { name: 'amountReceivableMax', value: input.amountReceivableMax }, { name: 'paymentDateMin', value: input.paymentDateMin }, { name: 'paymentDateMax', value: input.paymentDateMax }, { name: 'referenceNo', value: input.referenceNo }, { name: 'paymentModeMin', value: input.paymentModeMin }, { name: 'paymentModeMax', value: input.paymentModeMax }, { name: 'paymentId', value: input.paymentId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentReceipts.paymentReceipt.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-receipts/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.paymentPages.paymentPage

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.paymentPages.paymentPage');

    nashServices.treasuryService.paymentPages.paymentPage.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-pages' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'templateName', value: input.templateName }, { name: 'includePersonalInformation', value: input.includePersonalInformation }, { name: 'includePageInformation', value: input.includePageInformation }, { name: 'includeTimeRange', value: input.includeTimeRange }, { name: 'websiteToRedirect', value: input.websiteToRedirect }, { name: 'includeVenue', value: input.includeVenue }, { name: 'includeProductDetails', value: input.includeProductDetails }, { name: 'includeContactInformation', value: input.includeContactInformation }, { name: 'includeTermsAndConditions', value: input.includeTermsAndConditions }, { name: 'includeShippingInformation', value: input.includeShippingInformation }, { name: 'includePayerInformation', value: input.includePayerInformation }, { name: 'includeBeneficiaryInformation', value: input.includeBeneficiaryInformation }, { name: 'includeDeadlines', value: input.includeDeadlines }, { name: 'includeSocialMediaLinks', value: input.includeSocialMediaLinks }, { name: 'name', value: input.name }, { name: 'description', value: input.description }, { name: 'allowAdjustQuantity', value: input.allowAdjustQuantity }, { name: 'timeRange', value: input.timeRange }, { name: 'dayRange', value: input.dayRange }, { name: 'venueDescription', value: input.venueDescription }, { name: 'latitudeMin', value: input.latitudeMin }, { name: 'latitudeMax', value: input.latitudeMax }, { name: 'longitudeMin', value: input.longitudeMin }, { name: 'longitudeMax', value: input.longitudeMax }, { name: 'paymentLinkPricingMode', value: input.paymentLinkPricingMode }, { name: 'priceMin', value: input.priceMin }, { name: 'priceMax', value: input.priceMax }, { name: 'paymentLinkStatus', value: input.paymentLinkStatus }, { name: 'invoiceRecurrence', value: input.invoiceRecurrence }, { name: 'quantityMin', value: input.quantityMin }, { name: 'quantityMax', value: input.quantityMax }, { name: 'discount', value: input.discount }, { name: 'contactName', value: input.contactName }, { name: 'contactEmail', value: input.contactEmail }, { name: 'contactPhysicalAddress', value: input.contactPhysicalAddress }, { name: 'termsAndConditions', value: input.termsAndConditions }, { name: 'includeDefaultTerms', value: input.includeDefaultTerms }, { name: 'deadlineDateMin', value: input.deadlineDateMin }, { name: 'deadlineDateMax', value: input.deadlineDateMax }, { name: 'link', value: input.link }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentPages.paymentPage.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-pages/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentPages.paymentPage.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-pages',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentPages.paymentPage.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-pages/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentPages.paymentPage['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-pages/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentPages.paymentPage.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-pages/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'templateName', value: input.templateName }, { name: 'includePersonalInformation', value: input.includePersonalInformation }, { name: 'includePageInformation', value: input.includePageInformation }, { name: 'includeTimeRange', value: input.includeTimeRange }, { name: 'websiteToRedirect', value: input.websiteToRedirect }, { name: 'includeVenue', value: input.includeVenue }, { name: 'includeProductDetails', value: input.includeProductDetails }, { name: 'includeContactInformation', value: input.includeContactInformation }, { name: 'includeTermsAndConditions', value: input.includeTermsAndConditions }, { name: 'includeShippingInformation', value: input.includeShippingInformation }, { name: 'includePayerInformation', value: input.includePayerInformation }, { name: 'includeBeneficiaryInformation', value: input.includeBeneficiaryInformation }, { name: 'includeDeadlines', value: input.includeDeadlines }, { name: 'includeSocialMediaLinks', value: input.includeSocialMediaLinks }, { name: 'name', value: input.name }, { name: 'description', value: input.description }, { name: 'allowAdjustQuantity', value: input.allowAdjustQuantity }, { name: 'timeRange', value: input.timeRange }, { name: 'dayRange', value: input.dayRange }, { name: 'venueDescription', value: input.venueDescription }, { name: 'latitudeMin', value: input.latitudeMin }, { name: 'latitudeMax', value: input.latitudeMax }, { name: 'longitudeMin', value: input.longitudeMin }, { name: 'longitudeMax', value: input.longitudeMax }, { name: 'paymentLinkPricingMode', value: input.paymentLinkPricingMode }, { name: 'priceMin', value: input.priceMin }, { name: 'priceMax', value: input.priceMax }, { name: 'paymentLinkStatus', value: input.paymentLinkStatus }, { name: 'invoiceRecurrence', value: input.invoiceRecurrence }, { name: 'quantityMin', value: input.quantityMin }, { name: 'quantityMax', value: input.quantityMax }, { name: 'discount', value: input.discount }, { name: 'contactName', value: input.contactName }, { name: 'contactEmail', value: input.contactEmail }, { name: 'contactPhysicalAddress', value: input.contactPhysicalAddress }, { name: 'termsAndConditions', value: input.termsAndConditions }, { name: 'includeDefaultTerms', value: input.includeDefaultTerms }, { name: 'deadlineDateMin', value: input.deadlineDateMin }, { name: 'deadlineDateMax', value: input.deadlineDateMax }, { name: 'link', value: input.link }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentPages.paymentPage.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-pages/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.paymentOrders.paymentOrder

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.paymentOrders.paymentOrder');

    nashServices.treasuryService.paymentOrders.paymentOrder.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-orders' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'type', value: input.type }, { name: 'description', value: input.description }, { name: 'identifier', value: input.identifier }, { name: 'additionalInformation', value: input.additionalInformation }, { name: 'bankStatementDescription', value: input.bankStatementDescription }, { name: 'remittanceInformation', value: input.remittanceInformation }, { name: 'internalDescription', value: input.internalDescription }, { name: 'paymentOrderMetadata', value: input.paymentOrderMetadata }, { name: 'isProcessed', value: input.isProcessed }, { name: 'paymentOrderApprovalStatus', value: input.paymentOrderApprovalStatus }, { name: 'executionDateMin', value: input.executionDateMin }, { name: 'executionDateMax', value: input.executionDateMax }, { name: 'invoiceRecurrence', value: input.invoiceRecurrence }, { name: 'repeatDate', value: input.repeatDate }, { name: 'paymentMethod', value: input.paymentMethod }, { name: 'paymentOrderNumber', value: input.paymentOrderNumber }, { name: 'invoiceId', value: input.invoiceId }, { name: 'businessId', value: input.businessId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentOrders.paymentOrder.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-orders/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentOrders.paymentOrder.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-orders/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentOrders.paymentOrder.getInvoiceLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-orders/invoice-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentOrders.paymentOrder.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-orders/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentOrders.paymentOrder.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-orders',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentOrders.paymentOrder.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-orders/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentOrders.paymentOrder['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-orders/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentOrders.paymentOrder.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-orders/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'type', value: input.type }, { name: 'description', value: input.description }, { name: 'identifier', value: input.identifier }, { name: 'additionalInformation', value: input.additionalInformation }, { name: 'bankStatementDescription', value: input.bankStatementDescription }, { name: 'remittanceInformation', value: input.remittanceInformation }, { name: 'internalDescription', value: input.internalDescription }, { name: 'paymentOrderMetadata', value: input.paymentOrderMetadata }, { name: 'isProcessed', value: input.isProcessed }, { name: 'paymentOrderApprovalStatus', value: input.paymentOrderApprovalStatus }, { name: 'executionDateMin', value: input.executionDateMin }, { name: 'executionDateMax', value: input.executionDateMax }, { name: 'invoiceRecurrence', value: input.invoiceRecurrence }, { name: 'repeatDate', value: input.repeatDate }, { name: 'paymentMethod', value: input.paymentMethod }, { name: 'paymentOrderNumber', value: input.paymentOrderNumber }, { name: 'invoiceId', value: input.invoiceId }, { name: 'businessId', value: input.businessId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentOrders.paymentOrder.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-orders/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.paymentOrderDetails.paymentOrderDetail

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.paymentOrderDetails.paymentOrderDetail');

    nashServices.treasuryService.paymentOrderDetails.paymentOrderDetail.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-order-details' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'type', value: input.type }, { name: 'paymentMethod', value: input.paymentMethod }, { name: 'executionDateMin', value: input.executionDateMin }, { name: 'executionDateMax', value: input.executionDateMax }, { name: 'cashFlowType', value: input.cashFlowType }, { name: 'bankStatementDescription', value: input.bankStatementDescription }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'status', value: input.status }, { name: 'paymentOrderDetailStatus', value: input.paymentOrderDetailStatus }, { name: 'processingDescription', value: input.processingDescription }, { name: 'paymentOrderId', value: input.paymentOrderId }, { name: 'currencyId', value: input.currencyId }, { name: 'linkedAccountId', value: input.linkedAccountId }, { name: 'globalAccountFromId', value: input.globalAccountFromId }, { name: 'virtualAccountId', value: input.virtualAccountId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentOrderDetails.paymentOrderDetail.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-order-details/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentOrderDetails.paymentOrderDetail.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-order-details/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentOrderDetails.paymentOrderDetail.getPaymentOrderLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-order-details/payment-order-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentOrderDetails.paymentOrderDetail.getCurrencyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-order-details/currency-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentOrderDetails.paymentOrderDetail.getLinkedAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-order-details/linked-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentOrderDetails.paymentOrderDetail.getGlobalAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-order-details/global-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentOrderDetails.paymentOrderDetail.getVirtualAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-order-details/virtual-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentOrderDetails.paymentOrderDetail.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-order-details',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentOrderDetails.paymentOrderDetail.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-order-details/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentOrderDetails.paymentOrderDetail['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-order-details/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentOrderDetails.paymentOrderDetail.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-order-details/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'type', value: input.type }, { name: 'paymentMethod', value: input.paymentMethod }, { name: 'executionDateMin', value: input.executionDateMin }, { name: 'executionDateMax', value: input.executionDateMax }, { name: 'cashFlowType', value: input.cashFlowType }, { name: 'bankStatementDescription', value: input.bankStatementDescription }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'status', value: input.status }, { name: 'paymentOrderDetailStatus', value: input.paymentOrderDetailStatus }, { name: 'processingDescription', value: input.processingDescription }, { name: 'paymentOrderId', value: input.paymentOrderId }, { name: 'currencyId', value: input.currencyId }, { name: 'linkedAccountId', value: input.linkedAccountId }, { name: 'globalAccountFromId', value: input.globalAccountFromId }, { name: 'virtualAccountId', value: input.virtualAccountId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentOrderDetails.paymentOrderDetail.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-order-details/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.paymentLinks.paymentLink

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.paymentLinks.paymentLink');

    nashServices.treasuryService.paymentLinks.paymentLink.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-links' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'description', value: input.description }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'quantityMin', value: input.quantityMin }, { name: 'quantityMax', value: input.quantityMax }, { name: 'reference', value: input.reference }, { name: 'callbackUrl', value: input.callbackUrl }, { name: 'paymentLinkPricingMode', value: input.paymentLinkPricingMode }, { name: 'invoiceRecurrence', value: input.invoiceRecurrence }, { name: 'includeFreeTrial', value: input.includeFreeTrial }, { name: 'allowPromotionCodes', value: input.allowPromotionCodes }, { name: 'allowAdjustQuantity', value: input.allowAdjustQuantity }, { name: 'collectPhoneNo', value: input.collectPhoneNo }, { name: 'collectEmailAddress', value: input.collectEmailAddress }, { name: 'paymentLinkStatus', value: input.paymentLinkStatus }, { name: 'paymentLinkType', value: input.paymentLinkType }, { name: 'link', value: input.link }, { name: 'businessId', value: input.businessId }, { name: 'currencyId', value: input.currencyId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentLinks.paymentLink.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-links/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentLinks.paymentLink.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-links/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentLinks.paymentLink.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-links/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentLinks.paymentLink.getCurrencyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-links/currency-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentLinks.paymentLink.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-links',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentLinks.paymentLink.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-links/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentLinks.paymentLink['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-links/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentLinks.paymentLink.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-links/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'description', value: input.description }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'quantityMin', value: input.quantityMin }, { name: 'quantityMax', value: input.quantityMax }, { name: 'reference', value: input.reference }, { name: 'callbackUrl', value: input.callbackUrl }, { name: 'paymentLinkPricingMode', value: input.paymentLinkPricingMode }, { name: 'invoiceRecurrence', value: input.invoiceRecurrence }, { name: 'includeFreeTrial', value: input.includeFreeTrial }, { name: 'allowPromotionCodes', value: input.allowPromotionCodes }, { name: 'allowAdjustQuantity', value: input.allowAdjustQuantity }, { name: 'collectPhoneNo', value: input.collectPhoneNo }, { name: 'collectEmailAddress', value: input.collectEmailAddress }, { name: 'paymentLinkStatus', value: input.paymentLinkStatus }, { name: 'paymentLinkType', value: input.paymentLinkType }, { name: 'link', value: input.link }, { name: 'businessId', value: input.businessId }, { name: 'currencyId', value: input.currencyId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentLinks.paymentLink.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-links/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.paymentLinkAppFiles.paymentLinkAppFile

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.paymentLinkAppFiles.paymentLinkAppFile');

    nashServices.treasuryService.paymentLinkAppFiles.paymentLinkAppFile.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-link-app-files' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'password', value: input.password }, { name: 'fileName', value: input.fileName }, { name: 'fileExtension', value: input.fileExtension }, { name: 'passwordProtected', value: input.passwordProtected }, { name: 'description', value: input.description }, { name: 'paymentLinkId', value: input.paymentLinkId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentLinkAppFiles.paymentLinkAppFile.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-link-app-files/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentLinkAppFiles.paymentLinkAppFile.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-link-app-files/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentLinkAppFiles.paymentLinkAppFile.getPaymentLinkLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-link-app-files/payment-link-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentLinkAppFiles.paymentLinkAppFile.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-link-app-files',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentLinkAppFiles.paymentLinkAppFile.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-link-app-files/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentLinkAppFiles.paymentLinkAppFile['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-link-app-files/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentLinkAppFiles.paymentLinkAppFile.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-link-app-files/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'password', value: input.password }, { name: 'fileName', value: input.fileName }, { name: 'fileExtension', value: input.fileExtension }, { name: 'passwordProtected', value: input.passwordProtected }, { name: 'description', value: input.description }, { name: 'paymentLinkId', value: input.paymentLinkId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.paymentLinkAppFiles.paymentLinkAppFile.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/payment-link-app-files/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.partyAccounts.partyAccount

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.partyAccounts.partyAccount');

    nashServices.treasuryService.partyAccounts.partyAccount.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/party-accounts' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'accountName', value: input.accountName }, { name: 'accountNumber', value: input.accountNumber }, { name: 'currencyId', value: input.currencyId }, { name: 'businessId', value: input.businessId }, { name: 'partyId', value: input.partyId }, { name: 'bankId', value: input.bankId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.partyAccounts.partyAccount.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/party-accounts/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.partyAccounts.partyAccount.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/party-accounts/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.partyAccounts.partyAccount.getCurrencyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/party-accounts/currency-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.partyAccounts.partyAccount.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/party-accounts/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.partyAccounts.partyAccount.getPartyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/party-accounts/party-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.partyAccounts.partyAccount.getBankLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/party-accounts/bank-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.partyAccounts.partyAccount.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/party-accounts',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.partyAccounts.partyAccount.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/party-accounts/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.partyAccounts.partyAccount['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/party-accounts/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.partyAccounts.partyAccount.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/party-accounts/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'accountName', value: input.accountName }, { name: 'accountNumber', value: input.accountNumber }, { name: 'currencyId', value: input.currencyId }, { name: 'businessId', value: input.businessId }, { name: 'partyId', value: input.partyId }, { name: 'bankId', value: input.bankId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.partyAccounts.partyAccount.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/party-accounts/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.parties.party

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.parties.party');

    nashServices.treasuryService.parties.party.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/parties' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'firstName', value: input.firstName }, { name: 'lastName', value: input.lastName }, { name: 'title', value: input.title }, { name: 'emailAddress', value: input.emailAddress }, { name: 'website', value: input.website }, { name: 'phoneNo', value: input.phoneNo }, { name: 'taxPIN', value: input.taxPIN }, { name: 'partyType', value: input.partyType }, { name: 'dateOfBirthMin', value: input.dateOfBirthMin }, { name: 'dateOfBirthMax', value: input.dateOfBirthMax }, { name: 'identificationNo', value: input.identificationNo }, { name: 'customerId', value: input.customerId }, { name: 'vendorId', value: input.vendorId }, { name: 'businessId', value: input.businessId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.parties.party.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/parties/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.parties.party.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/parties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.parties.party.getCustomerLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/parties/customer-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.parties.party.getVendorLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/parties/vendor-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.parties.party.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/parties/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.parties.party.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/parties',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.parties.party.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/parties/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.parties.party['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/parties/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.parties.party.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/parties/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'firstName', value: input.firstName }, { name: 'lastName', value: input.lastName }, { name: 'title', value: input.title }, { name: 'emailAddress', value: input.emailAddress }, { name: 'website', value: input.website }, { name: 'phoneNo', value: input.phoneNo }, { name: 'taxPIN', value: input.taxPIN }, { name: 'partyType', value: input.partyType }, { name: 'dateOfBirthMin', value: input.dateOfBirthMin }, { name: 'dateOfBirthMax', value: input.dateOfBirthMax }, { name: 'identificationNo', value: input.identificationNo }, { name: 'customerId', value: input.customerId }, { name: 'vendorId', value: input.vendorId }, { name: 'businessId', value: input.businessId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.parties.party.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/parties/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.originSystems.originSystem

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.originSystems.originSystem');

    nashServices.treasuryService.originSystems.originSystem.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/origin-systems' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'originName', value: input.originName }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.originSystems.originSystem.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/origin-systems/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.originSystems.originSystem.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/origin-systems',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.originSystems.originSystem.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/origin-systems/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.originSystems.originSystem['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/origin-systems/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.originSystems.originSystem.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/origin-systems/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'originName', value: input.originName }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.originSystems.originSystem.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/origin-systems/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.notificationReminders.notificationReminder

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.notificationReminders.notificationReminder');

    nashServices.treasuryService.notificationReminders.notificationReminder.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/notification-reminders' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'notificationReminderRecordType', value: input.notificationReminderRecordType }, { name: 'notificationReminderOperation', value: input.notificationReminderOperation }, { name: 'message', value: input.message }, { name: 'notificationType', value: input.notificationType }, { name: 'invoiceId', value: input.invoiceId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.notificationReminders.notificationReminder.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/notification-reminders/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.notificationReminders.notificationReminder.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/notification-reminders/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.notificationReminders.notificationReminder.getInvoiceLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/notification-reminders/invoice-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.notificationReminders.notificationReminder.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/notification-reminders',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.notificationReminders.notificationReminder.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/notification-reminders/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.notificationReminders.notificationReminder['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/notification-reminders/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.notificationReminders.notificationReminder.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/notification-reminders/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'notificationReminderRecordType', value: input.notificationReminderRecordType }, { name: 'notificationReminderOperation', value: input.notificationReminderOperation }, { name: 'message', value: input.message }, { name: 'notificationType', value: input.notificationType }, { name: 'invoiceId', value: input.invoiceId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.notificationReminders.notificationReminder.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/notification-reminders/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.mobileMoneyBusinessAccountCallBacks.mobileMoneyBusinessAccountCallBack

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.mobileMoneyBusinessAccountCallBacks.mobileMoneyBusinessAccountCallBack');

    nashServices.treasuryService.mobileMoneyBusinessAccountCallBacks.mobileMoneyBusinessAccountCallBack.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/mobile-money-business-account-call-backs' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'callbackUrl', value: input.callbackUrl }, { name: 'deleted', value: input.deleted }, { name: 'businessId', value: input.businessId }, { name: 'linkedAccountId', value: input.linkedAccountId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.mobileMoneyBusinessAccountCallBacks.mobileMoneyBusinessAccountCallBack.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/mobile-money-business-account-call-backs/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.mobileMoneyBusinessAccountCallBacks.mobileMoneyBusinessAccountCallBack.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/mobile-money-business-account-call-backs/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.mobileMoneyBusinessAccountCallBacks.mobileMoneyBusinessAccountCallBack.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/mobile-money-business-account-call-backs/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.mobileMoneyBusinessAccountCallBacks.mobileMoneyBusinessAccountCallBack.getLinkedAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/mobile-money-business-account-call-backs/linked-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.mobileMoneyBusinessAccountCallBacks.mobileMoneyBusinessAccountCallBack.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/mobile-money-business-account-call-backs',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.mobileMoneyBusinessAccountCallBacks.mobileMoneyBusinessAccountCallBack.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/mobile-money-business-account-call-backs/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.mobileMoneyBusinessAccountCallBacks.mobileMoneyBusinessAccountCallBack['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/mobile-money-business-account-call-backs/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.mobileMoneyBusinessAccountCallBacks.mobileMoneyBusinessAccountCallBack.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/mobile-money-business-account-call-backs/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'callbackUrl', value: input.callbackUrl }, { name: 'deleted', value: input.deleted }, { name: 'businessId', value: input.businessId }, { name: 'linkedAccountId', value: input.linkedAccountId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.mobileMoneyBusinessAccountCallBacks.mobileMoneyBusinessAccountCallBack.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/mobile-money-business-account-call-backs/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.linkedMoneyTransfers.linkedMoneyTransfer

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.linkedMoneyTransfers.linkedMoneyTransfer');

    nashServices.treasuryService.linkedMoneyTransfers.linkedMoneyTransfer.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/linked-money-transfers' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'accountTo', value: input.accountTo }, { name: 'accountToName', value: input.accountToName }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'isProcessed', value: input.isProcessed }, { name: 'description', value: input.description }, { name: 'reference', value: input.reference }, { name: 'businessId', value: input.businessId }, { name: 'linkedAccountId', value: input.linkedAccountId }, { name: 'currencyToId', value: input.currencyToId }, { name: 'currencyFromId', value: input.currencyFromId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.linkedMoneyTransfers.linkedMoneyTransfer.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/linked-money-transfers/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.linkedMoneyTransfers.linkedMoneyTransfer.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/linked-money-transfers/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.linkedMoneyTransfers.linkedMoneyTransfer.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/linked-money-transfers/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.linkedMoneyTransfers.linkedMoneyTransfer.getLinkedAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/linked-money-transfers/linked-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.linkedMoneyTransfers.linkedMoneyTransfer.getCurrencyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/linked-money-transfers/currency-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.linkedMoneyTransfers.linkedMoneyTransfer.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/linked-money-transfers',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.linkedMoneyTransfers.linkedMoneyTransfer.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/linked-money-transfers/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.linkedMoneyTransfers.linkedMoneyTransfer['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/linked-money-transfers/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.linkedMoneyTransfers.linkedMoneyTransfer.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/linked-money-transfers/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'accountTo', value: input.accountTo }, { name: 'accountToName', value: input.accountToName }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'isProcessed', value: input.isProcessed }, { name: 'description', value: input.description }, { name: 'reference', value: input.reference }, { name: 'businessId', value: input.businessId }, { name: 'linkedAccountId', value: input.linkedAccountId }, { name: 'currencyToId', value: input.currencyToId }, { name: 'currencyFromId', value: input.currencyFromId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.linkedMoneyTransfers.linkedMoneyTransfer.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/linked-money-transfers/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.linkedAccounts.linkedAccount

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.linkedAccounts.linkedAccount');

    nashServices.treasuryService.linkedAccounts.linkedAccount.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/linked-accounts' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'bankAccountType', value: input.bankAccountType }, { name: 'externalBankAccountType', value: input.externalBankAccountType }, { name: 'businessAccountName', value: input.businessAccountName }, { name: 'businessAccountNo', value: input.businessAccountNo }, { name: 'gatewayKey', value: input.gatewayKey }, { name: 'clientId', value: input.clientId }, { name: 'clientSecret', value: input.clientSecret }, { name: 'clientPassKey', value: input.clientPassKey }, { name: 'isAutoLinked', value: input.isAutoLinked }, { name: 'isDisabled', value: input.isDisabled }, { name: 'isValidated', value: input.isValidated }, { name: 'lastAccountBalanceMin', value: input.lastAccountBalanceMin }, { name: 'lastAccountBalanceMax', value: input.lastAccountBalanceMax }, { name: 'lastSyncBalanceDateMin', value: input.lastSyncBalanceDateMin }, { name: 'lastSyncBalanceDateMax', value: input.lastSyncBalanceDateMax }, { name: 'lastSyncStatementDateMin', value: input.lastSyncStatementDateMin }, { name: 'lastSyncStatementDateMax', value: input.lastSyncStatementDateMax }, { name: 'description', value: input.description }, { name: 'balanceWhenLinkedMin', value: input.balanceWhenLinkedMin }, { name: 'balanceWhenLinkedMax', value: input.balanceWhenLinkedMax }, { name: 'branchId', value: input.branchId }, { name: 'bankId', value: input.bankId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.linkedAccounts.linkedAccount.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/linked-accounts/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.linkedAccounts.linkedAccount.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/linked-accounts/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.linkedAccounts.linkedAccount.getBranchLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/linked-accounts/branch-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.linkedAccounts.linkedAccount.getBankLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/linked-accounts/bank-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.linkedAccounts.linkedAccount.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/linked-accounts',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.linkedAccounts.linkedAccount.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/linked-accounts/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.linkedAccounts.linkedAccount['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/linked-accounts/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.linkedAccounts.linkedAccount.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/linked-accounts/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'bankAccountType', value: input.bankAccountType }, { name: 'externalBankAccountType', value: input.externalBankAccountType }, { name: 'businessAccountName', value: input.businessAccountName }, { name: 'businessAccountNo', value: input.businessAccountNo }, { name: 'gatewayKey', value: input.gatewayKey }, { name: 'clientId', value: input.clientId }, { name: 'clientSecret', value: input.clientSecret }, { name: 'clientPassKey', value: input.clientPassKey }, { name: 'isAutoLinked', value: input.isAutoLinked }, { name: 'isDisabled', value: input.isDisabled }, { name: 'isValidated', value: input.isValidated }, { name: 'lastAccountBalanceMin', value: input.lastAccountBalanceMin }, { name: 'lastAccountBalanceMax', value: input.lastAccountBalanceMax }, { name: 'lastSyncBalanceDateMin', value: input.lastSyncBalanceDateMin }, { name: 'lastSyncBalanceDateMax', value: input.lastSyncBalanceDateMax }, { name: 'lastSyncStatementDateMin', value: input.lastSyncStatementDateMin }, { name: 'lastSyncStatementDateMax', value: input.lastSyncStatementDateMax }, { name: 'description', value: input.description }, { name: 'balanceWhenLinkedMin', value: input.balanceWhenLinkedMin }, { name: 'balanceWhenLinkedMax', value: input.balanceWhenLinkedMax }, { name: 'branchId', value: input.branchId }, { name: 'bankId', value: input.bankId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.linkedAccounts.linkedAccount.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/linked-accounts/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.ledgerUnPostedTransactions.ledgerUnPostedTransaction

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.ledgerUnPostedTransactions.ledgerUnPostedTransaction');

    nashServices.treasuryService.ledgerUnPostedTransactions.ledgerUnPostedTransaction.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-un-posted-transactions' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'source', value: input.source }, { name: 'description', value: input.description }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'subLedgerId', value: input.subLedgerId }, { name: 'ledgerAccountToId', value: input.ledgerAccountToId }, { name: 'ledgerAccountFromId', value: input.ledgerAccountFromId }, { name: 'reference', value: input.reference }, { name: 'isPosted', value: input.isPosted }, { name: 'feesMin', value: input.feesMin }, { name: 'feesMax', value: input.feesMax }, { name: 'isSynced', value: input.isSynced }, { name: 'syncDateMin', value: input.syncDateMin }, { name: 'syncDateMax', value: input.syncDateMax }, { name: 'syncId', value: input.syncId }, { name: 'syncErpId', value: input.syncErpId }, { name: 'ledgerId', value: input.ledgerId }, { name: 'currencyId', value: input.currencyId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerUnPostedTransactions.ledgerUnPostedTransaction.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-un-posted-transactions/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerUnPostedTransactions.ledgerUnPostedTransaction.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-un-posted-transactions/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerUnPostedTransactions.ledgerUnPostedTransaction.getLedgerLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-un-posted-transactions/ledger-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerUnPostedTransactions.ledgerUnPostedTransaction.getCurrencyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-un-posted-transactions/currency-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerUnPostedTransactions.ledgerUnPostedTransaction.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-un-posted-transactions',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerUnPostedTransactions.ledgerUnPostedTransaction.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-un-posted-transactions/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerUnPostedTransactions.ledgerUnPostedTransaction['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-un-posted-transactions/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerUnPostedTransactions.ledgerUnPostedTransaction.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-un-posted-transactions/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'source', value: input.source }, { name: 'description', value: input.description }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'subLedgerId', value: input.subLedgerId }, { name: 'ledgerAccountToId', value: input.ledgerAccountToId }, { name: 'ledgerAccountFromId', value: input.ledgerAccountFromId }, { name: 'reference', value: input.reference }, { name: 'isPosted', value: input.isPosted }, { name: 'feesMin', value: input.feesMin }, { name: 'feesMax', value: input.feesMax }, { name: 'isSynced', value: input.isSynced }, { name: 'syncDateMin', value: input.syncDateMin }, { name: 'syncDateMax', value: input.syncDateMax }, { name: 'syncId', value: input.syncId }, { name: 'syncErpId', value: input.syncErpId }, { name: 'ledgerId', value: input.ledgerId }, { name: 'currencyId', value: input.currencyId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerUnPostedTransactions.ledgerUnPostedTransaction.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-un-posted-transactions/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.ledgers.ledger

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.ledgers.ledger');

    nashServices.treasuryService.ledgers.ledger.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledgers' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'description', value: input.description }, { name: 'isSynced', value: input.isSynced }, { name: 'syncDateMin', value: input.syncDateMin }, { name: 'syncDateMax', value: input.syncDateMax }, { name: 'syncId', value: input.syncId }, { name: 'businessId', value: input.businessId }, { name: 'currencyId', value: input.currencyId }, { name: 'ledgerId', value: input.ledgerId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgers.ledger.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledgers/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgers.ledger.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledgers/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgers.ledger.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledgers/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgers.ledger.getCurrencyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledgers/currency-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgers.ledger.getLedgerLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledgers/ledger-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgers.ledger.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledgers',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgers.ledger.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledgers/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgers.ledger['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledgers/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgers.ledger.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledgers/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'description', value: input.description }, { name: 'isSynced', value: input.isSynced }, { name: 'syncDateMin', value: input.syncDateMin }, { name: 'syncDateMax', value: input.syncDateMax }, { name: 'syncId', value: input.syncId }, { name: 'businessId', value: input.businessId }, { name: 'currencyId', value: input.currencyId }, { name: 'ledgerId', value: input.ledgerId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgers.ledger.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledgers/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.ledgerPostedTransactions.ledgerPostedTransaction

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.ledgerPostedTransactions.ledgerPostedTransaction');

    nashServices.treasuryService.ledgerPostedTransactions.ledgerPostedTransaction.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-posted-transactions' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'source', value: input.source }, { name: 'description', value: input.description }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'effectiveDateMin', value: input.effectiveDateMin }, { name: 'effectiveDateMax', value: input.effectiveDateMax }, { name: 'reference', value: input.reference }, { name: 'feesMin', value: input.feesMin }, { name: 'feesMax', value: input.feesMax }, { name: 'isSynced', value: input.isSynced }, { name: 'syncDateMin', value: input.syncDateMin }, { name: 'syncDateMax', value: input.syncDateMax }, { name: 'syncId', value: input.syncId }, { name: 'syncErpId', value: input.syncErpId }, { name: 'ledgerId', value: input.ledgerId }, { name: 'currencyId', value: input.currencyId }, { name: 'ledgerAccountToId', value: input.ledgerAccountToId }, { name: 'ledgerAccountFromId', value: input.ledgerAccountFromId }, { name: 'subLedgerId', value: input.subLedgerId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerPostedTransactions.ledgerPostedTransaction.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-posted-transactions/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerPostedTransactions.ledgerPostedTransaction.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-posted-transactions/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerPostedTransactions.ledgerPostedTransaction.getLedgerLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-posted-transactions/ledger-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerPostedTransactions.ledgerPostedTransaction.getCurrencyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-posted-transactions/currency-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerPostedTransactions.ledgerPostedTransaction.getLedgerAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-posted-transactions/ledger-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerPostedTransactions.ledgerPostedTransaction.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-posted-transactions',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerPostedTransactions.ledgerPostedTransaction.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-posted-transactions/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerPostedTransactions.ledgerPostedTransaction['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-posted-transactions/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerPostedTransactions.ledgerPostedTransaction.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-posted-transactions/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'source', value: input.source }, { name: 'description', value: input.description }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'effectiveDateMin', value: input.effectiveDateMin }, { name: 'effectiveDateMax', value: input.effectiveDateMax }, { name: 'reference', value: input.reference }, { name: 'feesMin', value: input.feesMin }, { name: 'feesMax', value: input.feesMax }, { name: 'isSynced', value: input.isSynced }, { name: 'syncDateMin', value: input.syncDateMin }, { name: 'syncDateMax', value: input.syncDateMax }, { name: 'syncId', value: input.syncId }, { name: 'syncErpId', value: input.syncErpId }, { name: 'ledgerId', value: input.ledgerId }, { name: 'currencyId', value: input.currencyId }, { name: 'ledgerAccountToId', value: input.ledgerAccountToId }, { name: 'ledgerAccountFromId', value: input.ledgerAccountFromId }, { name: 'subLedgerId', value: input.subLedgerId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerPostedTransactions.ledgerPostedTransaction.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-posted-transactions/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.ledgerEntries.ledgerEntry

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.ledgerEntries.ledgerEntry');

    nashServices.treasuryService.ledgerEntries.ledgerEntry.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-entries' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'description', value: input.description }, { name: 'transactionType', value: input.transactionType }, { name: 'isSynced', value: input.isSynced }, { name: 'syncDateMin', value: input.syncDateMin }, { name: 'syncDateMax', value: input.syncDateMax }, { name: 'syncIdentifier', value: input.syncIdentifier }, { name: 'syncERPIdentifier', value: input.syncERPIdentifier }, { name: 'currencyId', value: input.currencyId }, { name: 'ledgerAccountId', value: input.ledgerAccountId }, { name: 'paymentId', value: input.paymentId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerEntries.ledgerEntry.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-entries/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerEntries.ledgerEntry.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-entries/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerEntries.ledgerEntry.getCurrencyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-entries/currency-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerEntries.ledgerEntry.getLedgerAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-entries/ledger-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerEntries.ledgerEntry.getPaymentLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-entries/payment-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerEntries.ledgerEntry.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-entries',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerEntries.ledgerEntry.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-entries/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerEntries.ledgerEntry['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-entries/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerEntries.ledgerEntry.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-entries/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'description', value: input.description }, { name: 'transactionType', value: input.transactionType }, { name: 'isSynced', value: input.isSynced }, { name: 'syncDateMin', value: input.syncDateMin }, { name: 'syncDateMax', value: input.syncDateMax }, { name: 'syncIdentifier', value: input.syncIdentifier }, { name: 'syncERPIdentifier', value: input.syncERPIdentifier }, { name: 'currencyId', value: input.currencyId }, { name: 'ledgerAccountId', value: input.ledgerAccountId }, { name: 'paymentId', value: input.paymentId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerEntries.ledgerEntry.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-entries/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.ledgerAccounts.ledgerAccount

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.ledgerAccounts.ledgerAccount');

    nashServices.treasuryService.ledgerAccounts.ledgerAccount.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-accounts' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'description', value: input.description }, { name: 'openingBalanceMin', value: input.openingBalanceMin }, { name: 'openingBalanceMax', value: input.openingBalanceMax }, { name: 'availableBalanceMin', value: input.availableBalanceMin }, { name: 'availableBalanceMax', value: input.availableBalanceMax }, { name: 'postedBalanceMin', value: input.postedBalanceMin }, { name: 'postedBalanceMax', value: input.postedBalanceMax }, { name: 'normalBalance', value: input.normalBalance }, { name: 'subLedgerId', value: input.subLedgerId }, { name: 'isSynced', value: input.isSynced }, { name: 'syncDateMin', value: input.syncDateMin }, { name: 'syncDateMax', value: input.syncDateMax }, { name: 'syncId', value: input.syncId }, { name: 'syncErpId', value: input.syncErpId }, { name: 'ledgerId', value: input.ledgerId }, { name: 'businessId', value: input.businessId }, { name: 'customerId', value: input.customerId }, { name: 'vendorId', value: input.vendorId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerAccounts.ledgerAccount.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-accounts/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerAccounts.ledgerAccount.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-accounts/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerAccounts.ledgerAccount.getLedgerLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-accounts/ledger-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerAccounts.ledgerAccount.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-accounts/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerAccounts.ledgerAccount.getCustomerLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-accounts/customer-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerAccounts.ledgerAccount.getVendorLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-accounts/vendor-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerAccounts.ledgerAccount.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-accounts',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerAccounts.ledgerAccount.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-accounts/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerAccounts.ledgerAccount['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-accounts/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerAccounts.ledgerAccount.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-accounts/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'description', value: input.description }, { name: 'openingBalanceMin', value: input.openingBalanceMin }, { name: 'openingBalanceMax', value: input.openingBalanceMax }, { name: 'availableBalanceMin', value: input.availableBalanceMin }, { name: 'availableBalanceMax', value: input.availableBalanceMax }, { name: 'postedBalanceMin', value: input.postedBalanceMin }, { name: 'postedBalanceMax', value: input.postedBalanceMax }, { name: 'normalBalance', value: input.normalBalance }, { name: 'subLedgerId', value: input.subLedgerId }, { name: 'isSynced', value: input.isSynced }, { name: 'syncDateMin', value: input.syncDateMin }, { name: 'syncDateMax', value: input.syncDateMax }, { name: 'syncId', value: input.syncId }, { name: 'syncErpId', value: input.syncErpId }, { name: 'ledgerId', value: input.ledgerId }, { name: 'businessId', value: input.businessId }, { name: 'customerId', value: input.customerId }, { name: 'vendorId', value: input.vendorId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.ledgerAccounts.ledgerAccount.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/ledger-accounts/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.items.item

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.items.item');

    nashServices.treasuryService.items.item.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/items' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'quantityMin', value: input.quantityMin }, { name: 'quantityMax', value: input.quantityMax }, { name: 'priceMin', value: input.priceMin }, { name: 'priceMax', value: input.priceMax }, { name: 'discountMin', value: input.discountMin }, { name: 'discountMax', value: input.discountMax }, { name: 'taxMin', value: input.taxMin }, { name: 'taxMax', value: input.taxMax }, { name: 'totalAmountMin', value: input.totalAmountMin }, { name: 'totalAmountMax', value: input.totalAmountMax }, { name: 'productId', value: input.productId }, { name: 'serviceId', value: input.serviceId }, { name: 'invoiceId', value: input.invoiceId }, { name: 'invoiceDocumentId', value: input.invoiceDocumentId }, { name: 'currencyId', value: input.currencyId }, { name: 'billId', value: input.billId }, { name: 'businessId', value: input.businessId }, { name: 'debitNoteId', value: input.debitNoteId }, { name: 'creditNoteId', value: input.creditNoteId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.items.item.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/items/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.items.item.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/items/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.items.item.getProductLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/items/product-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.items.item.getServiceLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/items/service-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.items.item.getInvoiceLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/items/invoice-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.items.item.getInvoiceDocumentLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/items/invoice-document-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.items.item.getCurrencyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/items/currency-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.items.item.getBillLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/items/bill-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.items.item.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/items/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.items.item.getDebitNoteLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/items/debit-note-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.items.item.getCreditNoteLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/items/credit-note-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.items.item.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/items',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.items.item.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/items/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.items.item['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/items/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.items.item.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/items/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'quantityMin', value: input.quantityMin }, { name: 'quantityMax', value: input.quantityMax }, { name: 'priceMin', value: input.priceMin }, { name: 'priceMax', value: input.priceMax }, { name: 'discountMin', value: input.discountMin }, { name: 'discountMax', value: input.discountMax }, { name: 'taxMin', value: input.taxMin }, { name: 'taxMax', value: input.taxMax }, { name: 'totalAmountMin', value: input.totalAmountMin }, { name: 'totalAmountMax', value: input.totalAmountMax }, { name: 'productId', value: input.productId }, { name: 'serviceId', value: input.serviceId }, { name: 'invoiceId', value: input.invoiceId }, { name: 'invoiceDocumentId', value: input.invoiceDocumentId }, { name: 'currencyId', value: input.currencyId }, { name: 'billId', value: input.billId }, { name: 'businessId', value: input.businessId }, { name: 'debitNoteId', value: input.debitNoteId }, { name: 'creditNoteId', value: input.creditNoteId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.items.item.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/items/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.invoices.invoice

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.invoices.invoice');

    nashServices.treasuryService.invoices.invoice.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoices' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'amountPaidMin', value: input.amountPaidMin }, { name: 'amountPaidMax', value: input.amountPaidMax }, { name: 'creditNoteAmountMin', value: input.creditNoteAmountMin }, { name: 'creditNoteAmountMax', value: input.creditNoteAmountMax }, { name: 'debitNoteAmountMin', value: input.debitNoteAmountMin }, { name: 'debitNoteAmountMax', value: input.debitNoteAmountMax }, { name: 'invoiceHeader', value: input.invoiceHeader }, { name: 'description', value: input.description }, { name: 'dueDateMin', value: input.dueDateMin }, { name: 'dueDateMax', value: input.dueDateMax }, { name: 'invoiceDateMin', value: input.invoiceDateMin }, { name: 'invoiceDateMax', value: input.invoiceDateMax }, { name: 'reconcileDateMin', value: input.reconcileDateMin }, { name: 'reconcileDateMax', value: input.reconcileDateMax }, { name: 'clearanceDateMin', value: input.clearanceDateMin }, { name: 'clearanceDateMax', value: input.clearanceDateMax }, { name: 'lastSentMin', value: input.lastSentMin }, { name: 'lastSentMax', value: input.lastSentMax }, { name: 'lastViewedMin', value: input.lastViewedMin }, { name: 'lastViewedMax', value: input.lastViewedMax }, { name: 'viewCountMin', value: input.viewCountMin }, { name: 'viewCountMax', value: input.viewCountMax }, { name: 'lastReminderSentMin', value: input.lastReminderSentMin }, { name: 'lastReminderSentMax', value: input.lastReminderSentMax }, { name: 'lastApprovalSentMin', value: input.lastApprovalSentMin }, { name: 'lastApprovalSentMax', value: input.lastApprovalSentMax }, { name: 'paymentInitiationCountMin', value: input.paymentInitiationCountMin }, { name: 'paymentInitiationCountMax', value: input.paymentInitiationCountMax }, { name: 'isCompleted', value: input.isCompleted }, { name: 'requireApproval', value: input.requireApproval }, { name: 'invoiceStatus', value: input.invoiceStatus }, { name: 'paymentStatus', value: input.paymentStatus }, { name: 'sendToRecipient', value: input.sendToRecipient }, { name: 'invoiceType', value: input.invoiceType }, { name: 'invoiceRecurrence', value: input.invoiceRecurrence }, { name: 'repeatDate', value: input.repeatDate }, { name: 'nextDueDateMin', value: input.nextDueDateMin }, { name: 'nextDueDateMax', value: input.nextDueDateMax }, { name: 'nextRecurrenceDateMin', value: input.nextRecurrenceDateMin }, { name: 'nextRecurrenceDateMax', value: input.nextRecurrenceDateMax }, { name: 'recurrentStartDateMin', value: input.recurrentStartDateMin }, { name: 'recurrentStartDateMax', value: input.recurrentStartDateMax }, { name: 'payableAmountMin', value: input.payableAmountMin }, { name: 'payableAmountMax', value: input.payableAmountMax }, { name: 'notes', value: input.notes }, { name: 'gatewayKey', value: input.gatewayKey }, { name: 'callbackPaymentCompleteUrl', value: input.callbackPaymentCompleteUrl }, { name: 'callbackPaymentCancelUrl', value: input.callbackPaymentCancelUrl }, { name: 'synced', value: input.synced }, { name: 'syncAttemptsMin', value: input.syncAttemptsMin }, { name: 'syncAttemptsMax', value: input.syncAttemptsMax }, { name: 'datePaidMin', value: input.datePaidMin }, { name: 'datePaidMax', value: input.datePaidMax }, { name: 'syncDateMin', value: input.syncDateMin }, { name: 'syncDateMax', value: input.syncDateMax }, { name: 'itemProductType', value: input.itemProductType }, { name: 'erpInvoiceNumber', value: input.erpInvoiceNumber }, { name: 'errors', value: input.errors }, { name: 'invoiceNumber', value: input.invoiceNumber }, { name: 'originSystemId', value: input.originSystemId }, { name: 'currencyId', value: input.currencyId }, { name: 'businessId', value: input.businessId }, { name: 'globalAccountId', value: input.globalAccountId }, { name: 'virtualAccountId', value: input.virtualAccountId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoices.invoice.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoices/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoices.invoice.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoices/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoices.invoice.getOriginSystemLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoices/origin-system-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoices.invoice.getCurrencyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoices/currency-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoices.invoice.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoices/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoices.invoice.getGlobalAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoices/global-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoices.invoice.getVirtualAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoices/virtual-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoices.invoice.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoices',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.invoices.invoice.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoices/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.invoices.invoice['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoices/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.invoices.invoice.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoices/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'amountPaidMin', value: input.amountPaidMin }, { name: 'amountPaidMax', value: input.amountPaidMax }, { name: 'creditNoteAmountMin', value: input.creditNoteAmountMin }, { name: 'creditNoteAmountMax', value: input.creditNoteAmountMax }, { name: 'debitNoteAmountMin', value: input.debitNoteAmountMin }, { name: 'debitNoteAmountMax', value: input.debitNoteAmountMax }, { name: 'invoiceHeader', value: input.invoiceHeader }, { name: 'description', value: input.description }, { name: 'dueDateMin', value: input.dueDateMin }, { name: 'dueDateMax', value: input.dueDateMax }, { name: 'invoiceDateMin', value: input.invoiceDateMin }, { name: 'invoiceDateMax', value: input.invoiceDateMax }, { name: 'reconcileDateMin', value: input.reconcileDateMin }, { name: 'reconcileDateMax', value: input.reconcileDateMax }, { name: 'clearanceDateMin', value: input.clearanceDateMin }, { name: 'clearanceDateMax', value: input.clearanceDateMax }, { name: 'lastSentMin', value: input.lastSentMin }, { name: 'lastSentMax', value: input.lastSentMax }, { name: 'lastViewedMin', value: input.lastViewedMin }, { name: 'lastViewedMax', value: input.lastViewedMax }, { name: 'viewCountMin', value: input.viewCountMin }, { name: 'viewCountMax', value: input.viewCountMax }, { name: 'lastReminderSentMin', value: input.lastReminderSentMin }, { name: 'lastReminderSentMax', value: input.lastReminderSentMax }, { name: 'lastApprovalSentMin', value: input.lastApprovalSentMin }, { name: 'lastApprovalSentMax', value: input.lastApprovalSentMax }, { name: 'paymentInitiationCountMin', value: input.paymentInitiationCountMin }, { name: 'paymentInitiationCountMax', value: input.paymentInitiationCountMax }, { name: 'isCompleted', value: input.isCompleted }, { name: 'requireApproval', value: input.requireApproval }, { name: 'invoiceStatus', value: input.invoiceStatus }, { name: 'paymentStatus', value: input.paymentStatus }, { name: 'sendToRecipient', value: input.sendToRecipient }, { name: 'invoiceType', value: input.invoiceType }, { name: 'invoiceRecurrence', value: input.invoiceRecurrence }, { name: 'repeatDate', value: input.repeatDate }, { name: 'nextDueDateMin', value: input.nextDueDateMin }, { name: 'nextDueDateMax', value: input.nextDueDateMax }, { name: 'nextRecurrenceDateMin', value: input.nextRecurrenceDateMin }, { name: 'nextRecurrenceDateMax', value: input.nextRecurrenceDateMax }, { name: 'recurrentStartDateMin', value: input.recurrentStartDateMin }, { name: 'recurrentStartDateMax', value: input.recurrentStartDateMax }, { name: 'payableAmountMin', value: input.payableAmountMin }, { name: 'payableAmountMax', value: input.payableAmountMax }, { name: 'notes', value: input.notes }, { name: 'gatewayKey', value: input.gatewayKey }, { name: 'callbackPaymentCompleteUrl', value: input.callbackPaymentCompleteUrl }, { name: 'callbackPaymentCancelUrl', value: input.callbackPaymentCancelUrl }, { name: 'synced', value: input.synced }, { name: 'syncAttemptsMin', value: input.syncAttemptsMin }, { name: 'syncAttemptsMax', value: input.syncAttemptsMax }, { name: 'datePaidMin', value: input.datePaidMin }, { name: 'datePaidMax', value: input.datePaidMax }, { name: 'syncDateMin', value: input.syncDateMin }, { name: 'syncDateMax', value: input.syncDateMax }, { name: 'itemProductType', value: input.itemProductType }, { name: 'erpInvoiceNumber', value: input.erpInvoiceNumber }, { name: 'errors', value: input.errors }, { name: 'invoiceNumber', value: input.invoiceNumber }, { name: 'originSystemId', value: input.originSystemId }, { name: 'currencyId', value: input.currencyId }, { name: 'businessId', value: input.businessId }, { name: 'globalAccountId', value: input.globalAccountId }, { name: 'virtualAccountId', value: input.virtualAccountId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoices.invoice.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoices/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.invoiceRejectDecisions.invoiceRejectDecision

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.invoiceRejectDecisions.invoiceRejectDecision');

    nashServices.treasuryService.invoiceRejectDecisions.invoiceRejectDecision.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-reject-decisions' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'rejectionNotes', value: input.rejectionNotes }, { name: 'requesterId', value: input.requesterId }, { name: 'requesterNotes', value: input.requesterNotes }, { name: 'rejectorId', value: input.rejectorId }, { name: 'invoiceId', value: input.invoiceId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceRejectDecisions.invoiceRejectDecision.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-reject-decisions/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceRejectDecisions.invoiceRejectDecision.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-reject-decisions/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceRejectDecisions.invoiceRejectDecision.getInvoiceLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-reject-decisions/invoice-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceRejectDecisions.invoiceRejectDecision.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-reject-decisions',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceRejectDecisions.invoiceRejectDecision.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-reject-decisions/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceRejectDecisions.invoiceRejectDecision['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-reject-decisions/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceRejectDecisions.invoiceRejectDecision.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-reject-decisions/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'rejectionNotes', value: input.rejectionNotes }, { name: 'requesterId', value: input.requesterId }, { name: 'requesterNotes', value: input.requesterNotes }, { name: 'rejectorId', value: input.rejectorId }, { name: 'invoiceId', value: input.invoiceId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceRejectDecisions.invoiceRejectDecision.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-reject-decisions/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.invoicePendingDecisions.invoicePendingDecision

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.invoicePendingDecisions.invoicePendingDecision');

    nashServices.treasuryService.invoicePendingDecisions.invoicePendingDecision.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-pending-decisions' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'approverId', value: input.approverId }, { name: 'requesterId', value: input.requesterId }, { name: 'requesterComments', value: input.requesterComments }, { name: 'invoiceId', value: input.invoiceId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoicePendingDecisions.invoicePendingDecision.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-pending-decisions/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoicePendingDecisions.invoicePendingDecision.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-pending-decisions/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoicePendingDecisions.invoicePendingDecision.getInvoiceLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-pending-decisions/invoice-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoicePendingDecisions.invoicePendingDecision.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-pending-decisions',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.invoicePendingDecisions.invoicePendingDecision.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-pending-decisions/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.invoicePendingDecisions.invoicePendingDecision['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-pending-decisions/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.invoicePendingDecisions.invoicePendingDecision.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-pending-decisions/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'approverId', value: input.approverId }, { name: 'requesterId', value: input.requesterId }, { name: 'requesterComments', value: input.requesterComments }, { name: 'invoiceId', value: input.invoiceId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoicePendingDecisions.invoicePendingDecision.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-pending-decisions/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.invoiceEvents.invoiceEvent

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.invoiceEvents.invoiceEvent');

    nashServices.treasuryService.invoiceEvents.invoiceEvent.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-events' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'invoiceStatus', value: input.invoiceStatus }, { name: 'paymentStatus', value: input.paymentStatus }, { name: 'notes', value: input.notes }, { name: 'invoiceId', value: input.invoiceId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceEvents.invoiceEvent.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-events/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceEvents.invoiceEvent.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-events/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceEvents.invoiceEvent.getInvoiceLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-events/invoice-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceEvents.invoiceEvent.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-events',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceEvents.invoiceEvent.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-events/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceEvents.invoiceEvent['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-events/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceEvents.invoiceEvent.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-events/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'invoiceStatus', value: input.invoiceStatus }, { name: 'paymentStatus', value: input.paymentStatus }, { name: 'notes', value: input.notes }, { name: 'invoiceId', value: input.invoiceId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceEvents.invoiceEvent.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-events/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.invoiceDocuments.invoiceDocument

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.invoiceDocuments.invoiceDocument');

    nashServices.treasuryService.invoiceDocuments.invoiceDocument.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-documents' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'documentNo', value: input.documentNo }, { name: 'invoiceNumber', value: input.invoiceNumber }, { name: 'notes', value: input.notes }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'invoiceStatus', value: input.invoiceStatus }, { name: 'invoiceDocumentType', value: input.invoiceDocumentType }, { name: 'approvedOnMin', value: input.approvedOnMin }, { name: 'approvedOnMax', value: input.approvedOnMax }, { name: 'appliedOnMin', value: input.appliedOnMin }, { name: 'appliedOnMax', value: input.appliedOnMax }, { name: 'invoiceId', value: input.invoiceId }, { name: 'vendorId', value: input.vendorId }, { name: 'customerId', value: input.customerId }, { name: 'partyId', value: input.partyId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceDocuments.invoiceDocument.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-documents/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceDocuments.invoiceDocument.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-documents/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceDocuments.invoiceDocument.getInvoiceLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-documents/invoice-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceDocuments.invoiceDocument.getVendorLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-documents/vendor-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceDocuments.invoiceDocument.getCustomerLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-documents/customer-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceDocuments.invoiceDocument.getPartyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-documents/party-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceDocuments.invoiceDocument.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-documents',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceDocuments.invoiceDocument.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-documents/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceDocuments.invoiceDocument['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-documents/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceDocuments.invoiceDocument.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-documents/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'documentNo', value: input.documentNo }, { name: 'invoiceNumber', value: input.invoiceNumber }, { name: 'notes', value: input.notes }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'invoiceStatus', value: input.invoiceStatus }, { name: 'invoiceDocumentType', value: input.invoiceDocumentType }, { name: 'approvedOnMin', value: input.approvedOnMin }, { name: 'approvedOnMax', value: input.approvedOnMax }, { name: 'appliedOnMin', value: input.appliedOnMin }, { name: 'appliedOnMax', value: input.appliedOnMax }, { name: 'invoiceId', value: input.invoiceId }, { name: 'vendorId', value: input.vendorId }, { name: 'customerId', value: input.customerId }, { name: 'partyId', value: input.partyId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceDocuments.invoiceDocument.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-documents/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.invoiceApprovalDecisions.invoiceApprovalDecision

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.invoiceApprovalDecisions.invoiceApprovalDecision');

    nashServices.treasuryService.invoiceApprovalDecisions.invoiceApprovalDecision.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-approval-decisions' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'approverId', value: input.approverId }, { name: 'requesterId', value: input.requesterId }, { name: 'approverNotes', value: input.approverNotes }, { name: 'requesterComments', value: input.requesterComments }, { name: 'invoiceId', value: input.invoiceId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceApprovalDecisions.invoiceApprovalDecision.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-approval-decisions/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceApprovalDecisions.invoiceApprovalDecision.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-approval-decisions/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceApprovalDecisions.invoiceApprovalDecision.getInvoiceLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-approval-decisions/invoice-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceApprovalDecisions.invoiceApprovalDecision.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-approval-decisions',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceApprovalDecisions.invoiceApprovalDecision.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-approval-decisions/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceApprovalDecisions.invoiceApprovalDecision['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-approval-decisions/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceApprovalDecisions.invoiceApprovalDecision.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-approval-decisions/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'approverId', value: input.approverId }, { name: 'requesterId', value: input.requesterId }, { name: 'approverNotes', value: input.approverNotes }, { name: 'requesterComments', value: input.requesterComments }, { name: 'invoiceId', value: input.invoiceId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceApprovalDecisions.invoiceApprovalDecision.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-approval-decisions/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.invoiceAppFiles.invoiceAppFile

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.invoiceAppFiles.invoiceAppFile');

    nashServices.treasuryService.invoiceAppFiles.invoiceAppFile.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-app-files' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'fileName', value: input.fileName }, { name: 'fileExtension', value: input.fileExtension }, { name: 'passwordProtected', value: input.passwordProtected }, { name: 'description', value: input.description }, { name: 'password', value: input.password }, { name: 'invoiceId', value: input.invoiceId }, { name: 'creditNoteId', value: input.creditNoteId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceAppFiles.invoiceAppFile.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-app-files/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceAppFiles.invoiceAppFile.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-app-files/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceAppFiles.invoiceAppFile.getInvoiceLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-app-files/invoice-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceAppFiles.invoiceAppFile.getCreditNoteLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-app-files/credit-note-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceAppFiles.invoiceAppFile.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-app-files',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceAppFiles.invoiceAppFile.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-app-files/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceAppFiles.invoiceAppFile['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-app-files/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceAppFiles.invoiceAppFile.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-app-files/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'fileName', value: input.fileName }, { name: 'fileExtension', value: input.fileExtension }, { name: 'passwordProtected', value: input.passwordProtected }, { name: 'description', value: input.description }, { name: 'password', value: input.password }, { name: 'invoiceId', value: input.invoiceId }, { name: 'creditNoteId', value: input.creditNoteId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.invoiceAppFiles.invoiceAppFile.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/invoice-app-files/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.globalMoneyTransfers.globalMoneyTransfer

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.globalMoneyTransfers.globalMoneyTransfer');

    nashServices.treasuryService.globalMoneyTransfers.globalMoneyTransfer.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-money-transfers' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'accountTo', value: input.accountTo }, { name: 'accountToName', value: input.accountToName }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'isProcessed', value: input.isProcessed }, { name: 'description', value: input.description }, { name: 'reference', value: input.reference }, { name: 'businessId', value: input.businessId }, { name: 'currencyFromId', value: input.currencyFromId }, { name: 'currencyToId', value: input.currencyToId }, { name: 'globalAccountId', value: input.globalAccountId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.globalMoneyTransfers.globalMoneyTransfer.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-money-transfers/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.globalMoneyTransfers.globalMoneyTransfer.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-money-transfers/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.globalMoneyTransfers.globalMoneyTransfer.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-money-transfers/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.globalMoneyTransfers.globalMoneyTransfer.getCurrencyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-money-transfers/currency-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.globalMoneyTransfers.globalMoneyTransfer.getGlobalAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-money-transfers/global-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.globalMoneyTransfers.globalMoneyTransfer.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-money-transfers',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.globalMoneyTransfers.globalMoneyTransfer.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-money-transfers/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.globalMoneyTransfers.globalMoneyTransfer['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-money-transfers/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.globalMoneyTransfers.globalMoneyTransfer.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-money-transfers/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'accountTo', value: input.accountTo }, { name: 'accountToName', value: input.accountToName }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'isProcessed', value: input.isProcessed }, { name: 'description', value: input.description }, { name: 'reference', value: input.reference }, { name: 'businessId', value: input.businessId }, { name: 'currencyFromId', value: input.currencyFromId }, { name: 'currencyToId', value: input.currencyToId }, { name: 'globalAccountId', value: input.globalAccountId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.globalMoneyTransfers.globalMoneyTransfer.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-money-transfers/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.globalBusinessAccountCallbacks.globalBusinessAccountCallback

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.globalBusinessAccountCallbacks.globalBusinessAccountCallback');

    nashServices.treasuryService.globalBusinessAccountCallbacks.globalBusinessAccountCallback.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-business-account-callbacks' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'callbackUrl', value: input.callbackUrl }, { name: 'businessId', value: input.businessId }, { name: 'linkedAccountId', value: input.linkedAccountId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.globalBusinessAccountCallbacks.globalBusinessAccountCallback.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-business-account-callbacks/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.globalBusinessAccountCallbacks.globalBusinessAccountCallback.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-business-account-callbacks/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.globalBusinessAccountCallbacks.globalBusinessAccountCallback.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-business-account-callbacks/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.globalBusinessAccountCallbacks.globalBusinessAccountCallback.getLinkedAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-business-account-callbacks/linked-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.globalBusinessAccountCallbacks.globalBusinessAccountCallback.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-business-account-callbacks',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.globalBusinessAccountCallbacks.globalBusinessAccountCallback.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-business-account-callbacks/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.globalBusinessAccountCallbacks.globalBusinessAccountCallback['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-business-account-callbacks/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.globalBusinessAccountCallbacks.globalBusinessAccountCallback.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-business-account-callbacks/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'callbackUrl', value: input.callbackUrl }, { name: 'businessId', value: input.businessId }, { name: 'linkedAccountId', value: input.linkedAccountId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.globalBusinessAccountCallbacks.globalBusinessAccountCallback.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-business-account-callbacks/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.globalAccounts.globalAccount

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.globalAccounts.globalAccount');

    nashServices.treasuryService.globalAccounts.globalAccount.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-accounts' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'accountNumber', value: input.accountNumber }, { name: 'accountName', value: input.accountName }, { name: 'parentGlobalAccountId', value: input.parentGlobalAccountId }, { name: 'currencyId', value: input.currencyId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.globalAccounts.globalAccount.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-accounts/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.globalAccounts.globalAccount.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-accounts/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.globalAccounts.globalAccount.getGlobalAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-accounts/global-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.globalAccounts.globalAccount.getCurrencyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-accounts/currency-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.globalAccounts.globalAccount.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-accounts',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.globalAccounts.globalAccount.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-accounts/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.globalAccounts.globalAccount['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-accounts/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.globalAccounts.globalAccount.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-accounts/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'accountNumber', value: input.accountNumber }, { name: 'accountName', value: input.accountName }, { name: 'parentGlobalAccountId', value: input.parentGlobalAccountId }, { name: 'currencyId', value: input.currencyId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.globalAccounts.globalAccount.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/global-accounts/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.gatewayPaymentSetups.gatewayPaymentSetup

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.gatewayPaymentSetups.gatewayPaymentSetup');

    nashServices.treasuryService.gatewayPaymentSetups.gatewayPaymentSetup.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/gateway-payment-setups' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'gatewayKey', value: input.gatewayKey }, { name: 'password', value: input.password }, { name: 'collectionAccount', value: input.collectionAccount }, { name: 'isDisabled', value: input.isDisabled }, { name: 'businessId', value: input.businessId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.gatewayPaymentSetups.gatewayPaymentSetup.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/gateway-payment-setups/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.gatewayPaymentSetups.gatewayPaymentSetup.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/gateway-payment-setups/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.gatewayPaymentSetups.gatewayPaymentSetup.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/gateway-payment-setups/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.gatewayPaymentSetups.gatewayPaymentSetup.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/gateway-payment-setups',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.gatewayPaymentSetups.gatewayPaymentSetup.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/gateway-payment-setups/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.gatewayPaymentSetups.gatewayPaymentSetup['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/gateway-payment-setups/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.gatewayPaymentSetups.gatewayPaymentSetup.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/gateway-payment-setups/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'gatewayKey', value: input.gatewayKey }, { name: 'password', value: input.password }, { name: 'collectionAccount', value: input.collectionAccount }, { name: 'isDisabled', value: input.isDisabled }, { name: 'businessId', value: input.businessId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.gatewayPaymentSetups.gatewayPaymentSetup.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/gateway-payment-setups/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.erps.eRP

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.erps.eRP');

    nashServices.treasuryService.erps.eRP.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/e-rPS' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'nashSyncId', value: input.nashSyncId }, { name: 'erpName', value: input.erpName }, { name: 'slug', value: input.slug }, { name: 'clientTypeId', value: input.clientTypeId }, { name: 'requireUrl', value: input.requireUrl }, { name: 'requireDatabase', value: input.requireDatabase }, { name: 'canAutoLink', value: input.canAutoLink }, { name: 'active', value: input.active }, { name: 'description', value: input.description }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.erps.eRP.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/e-rPS/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.erps.eRP.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/e-rPS',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.erps.eRP.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/e-rPS/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.erps.eRP['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/e-rPS/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.erps.eRP.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/e-rPS/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'nashSyncId', value: input.nashSyncId }, { name: 'erpName', value: input.erpName }, { name: 'slug', value: input.slug }, { name: 'clientTypeId', value: input.clientTypeId }, { name: 'requireUrl', value: input.requireUrl }, { name: 'requireDatabase', value: input.requireDatabase }, { name: 'canAutoLink', value: input.canAutoLink }, { name: 'active', value: input.active }, { name: 'description', value: input.description }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.erps.eRP.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/e-rPS/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.employees.employee

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.employees.employee');

    nashServices.treasuryService.employees.employee.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/employees' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'applicationUserId', value: input.applicationUserId }, { name: 'reference', value: input.reference }, { name: 'businessId', value: input.businessId }, { name: 'partyId', value: input.partyId }, { name: 'virtualAccountId', value: input.virtualAccountId }, { name: 'globalAccountId', value: input.globalAccountId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.employees.employee.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/employees/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.employees.employee.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/employees/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.employees.employee.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/employees/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.employees.employee.getPartyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/employees/party-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.employees.employee.getVirtualAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/employees/virtual-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.employees.employee.getGlobalAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/employees/global-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.employees.employee.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/employees',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.employees.employee.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/employees/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.employees.employee['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/employees/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.employees.employee.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/employees/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'applicationUserId', value: input.applicationUserId }, { name: 'reference', value: input.reference }, { name: 'businessId', value: input.businessId }, { name: 'partyId', value: input.partyId }, { name: 'virtualAccountId', value: input.virtualAccountId }, { name: 'globalAccountId', value: input.globalAccountId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.employees.employee.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/employees/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.employeeAccountHolders.employeeAccountHolder

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.employeeAccountHolders.employeeAccountHolder');

    nashServices.treasuryService.employeeAccountHolders.employeeAccountHolder.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/employee-account-holders' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'reference', value: input.reference }, { name: 'employeeId', value: input.employeeId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.employeeAccountHolders.employeeAccountHolder.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/employee-account-holders/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.employeeAccountHolders.employeeAccountHolder.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/employee-account-holders/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.employeeAccountHolders.employeeAccountHolder.getEmployeeLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/employee-account-holders/employee-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.employeeAccountHolders.employeeAccountHolder.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/employee-account-holders',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.employeeAccountHolders.employeeAccountHolder.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/employee-account-holders/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.employeeAccountHolders.employeeAccountHolder['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/employee-account-holders/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.employeeAccountHolders.employeeAccountHolder.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/employee-account-holders/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'reference', value: input.reference }, { name: 'employeeId', value: input.employeeId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.employeeAccountHolders.employeeAccountHolder.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/employee-account-holders/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.departments.department

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.departments.department');

    nashServices.treasuryService.departments.department.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/departments' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'description', value: input.description }, { name: 'deleted', value: input.deleted }, { name: 'businessId', value: input.businessId }, { name: 'customerId', value: input.customerId }, { name: 'vendorId', value: input.vendorId }, { name: 'employeeId', value: input.employeeId }, { name: 'partyId', value: input.partyId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.departments.department.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/departments/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.departments.department.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/departments/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.departments.department.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/departments/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.departments.department.getCustomerLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/departments/customer-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.departments.department.getVendorLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/departments/vendor-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.departments.department.getEmployeeLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/departments/employee-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.departments.department.getPartyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/departments/party-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.departments.department.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/departments',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.departments.department.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/departments/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.departments.department['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/departments/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.departments.department.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/departments/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'description', value: input.description }, { name: 'deleted', value: input.deleted }, { name: 'businessId', value: input.businessId }, { name: 'customerId', value: input.customerId }, { name: 'vendorId', value: input.vendorId }, { name: 'employeeId', value: input.employeeId }, { name: 'partyId', value: input.partyId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.departments.department.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/departments/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.departmentAccountHolders.departmentAccountHolder

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.departmentAccountHolders.departmentAccountHolder');

    nashServices.treasuryService.departmentAccountHolders.departmentAccountHolder.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/department-account-holders' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'reference', value: input.reference }, { name: 'departmentId', value: input.departmentId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.departmentAccountHolders.departmentAccountHolder.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/department-account-holders/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.departmentAccountHolders.departmentAccountHolder.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/department-account-holders/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.departmentAccountHolders.departmentAccountHolder.getDepartmentLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/department-account-holders/department-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.departmentAccountHolders.departmentAccountHolder.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/department-account-holders',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.departmentAccountHolders.departmentAccountHolder.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/department-account-holders/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.departmentAccountHolders.departmentAccountHolder['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/department-account-holders/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.departmentAccountHolders.departmentAccountHolder.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/department-account-holders/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'reference', value: input.reference }, { name: 'departmentId', value: input.departmentId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.departmentAccountHolders.departmentAccountHolder.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/department-account-holders/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.debits.debit

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.debits.debit');

    nashServices.treasuryService.debits.debit.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debits' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'documentNo', value: input.documentNo }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'approvedOn', value: input.approvedOn }, { name: 'billId', value: input.billId }, { name: 'partyId', value: input.partyId }, { name: 'vendorId', value: input.vendorId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.debits.debit.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debits/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.debits.debit.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debits/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.debits.debit.getBillLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debits/bill-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.debits.debit.getPartyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debits/party-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.debits.debit.getVendorLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debits/vendor-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.debits.debit.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debits',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.debits.debit.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debits/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.debits.debit['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debits/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.debits.debit.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debits/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'documentNo', value: input.documentNo }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'approvedOn', value: input.approvedOn }, { name: 'billId', value: input.billId }, { name: 'partyId', value: input.partyId }, { name: 'vendorId', value: input.vendorId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.debits.debit.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debits/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.debitNotes.debitNote

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.debitNotes.debitNote');

    nashServices.treasuryService.debitNotes.debitNote.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debit-notes' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'documentNo', value: input.documentNo }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'notes', value: input.notes }, { name: 'approvedOn', value: input.approvedOn }, { name: 'billId', value: input.billId }, { name: 'partyId', value: input.partyId }, { name: 'vendorId', value: input.vendorId }, { name: 'businessId', value: input.businessId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.debitNotes.debitNote.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debit-notes/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.debitNotes.debitNote.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debit-notes/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.debitNotes.debitNote.getBillLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debit-notes/bill-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.debitNotes.debitNote.getPartyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debit-notes/party-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.debitNotes.debitNote.getVendorLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debit-notes/vendor-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.debitNotes.debitNote.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debit-notes/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.debitNotes.debitNote.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debit-notes',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.debitNotes.debitNote.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debit-notes/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.debitNotes.debitNote['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debit-notes/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.debitNotes.debitNote.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debit-notes/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'documentNo', value: input.documentNo }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'notes', value: input.notes }, { name: 'approvedOn', value: input.approvedOn }, { name: 'billId', value: input.billId }, { name: 'partyId', value: input.partyId }, { name: 'vendorId', value: input.vendorId }, { name: 'businessId', value: input.businessId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.debitNotes.debitNote.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/debit-notes/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.customers.customer

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.customers.customer');

    nashServices.treasuryService.customers.customer.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customers' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'customerBusinessName', value: input.customerBusinessName }, { name: 'name', value: input.name }, { name: 'contactPersonName', value: input.contactPersonName }, { name: 'synced', value: input.synced }, { name: 'syncAttemptsMin', value: input.syncAttemptsMin }, { name: 'syncAttemptsMax', value: input.syncAttemptsMax }, { name: 'syncDateMin', value: input.syncDateMin }, { name: 'syncDateMax', value: input.syncDateMax }, { name: 'syncIdentifier', value: input.syncIdentifier }, { name: 'syncERPIdentifier', value: input.syncERPIdentifier }, { name: 'errors', value: input.errors }, { name: 'isDirty', value: input.isDirty }, { name: 'originSystemId', value: input.originSystemId }, { name: 'partyId', value: input.partyId }, { name: 'businessId', value: input.businessId }, { name: 'invoiceId', value: input.invoiceId }, { name: 'globalAccountId', value: input.globalAccountId }, { name: 'virtualAccountId', value: input.virtualAccountId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.customers.customer.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customers/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.customers.customer.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customers/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.customers.customer.getOriginSystemLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customers/origin-system-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.customers.customer.getPartyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customers/party-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.customers.customer.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customers/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.customers.customer.getInvoiceLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customers/invoice-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.customers.customer.getGlobalAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customers/global-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.customers.customer.getVirtualAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customers/virtual-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.customers.customer.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customers',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.customers.customer.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customers/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.customers.customer['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customers/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.customers.customer.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customers/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'customerBusinessName', value: input.customerBusinessName }, { name: 'name', value: input.name }, { name: 'contactPersonName', value: input.contactPersonName }, { name: 'synced', value: input.synced }, { name: 'syncAttemptsMin', value: input.syncAttemptsMin }, { name: 'syncAttemptsMax', value: input.syncAttemptsMax }, { name: 'syncDateMin', value: input.syncDateMin }, { name: 'syncDateMax', value: input.syncDateMax }, { name: 'syncIdentifier', value: input.syncIdentifier }, { name: 'syncERPIdentifier', value: input.syncERPIdentifier }, { name: 'errors', value: input.errors }, { name: 'isDirty', value: input.isDirty }, { name: 'originSystemId', value: input.originSystemId }, { name: 'partyId', value: input.partyId }, { name: 'businessId', value: input.businessId }, { name: 'invoiceId', value: input.invoiceId }, { name: 'globalAccountId', value: input.globalAccountId }, { name: 'virtualAccountId', value: input.virtualAccountId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.customers.customer.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customers/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.customerAppFiles.customerAppFile

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.customerAppFiles.customerAppFile');

    nashServices.treasuryService.customerAppFiles.customerAppFile.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customer-app-files' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'fileName', value: input.fileName }, { name: 'fileExtension', value: input.fileExtension }, { name: 'passwordProtected', value: input.passwordProtected }, { name: 'description', value: input.description }, { name: 'password', value: input.password }, { name: 'customerId', value: input.customerId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.customerAppFiles.customerAppFile.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customer-app-files/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.customerAppFiles.customerAppFile.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customer-app-files/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.customerAppFiles.customerAppFile.getCustomerLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customer-app-files/customer-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.customerAppFiles.customerAppFile.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customer-app-files',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.customerAppFiles.customerAppFile.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customer-app-files/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.customerAppFiles.customerAppFile['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customer-app-files/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.customerAppFiles.customerAppFile.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customer-app-files/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'fileName', value: input.fileName }, { name: 'fileExtension', value: input.fileExtension }, { name: 'passwordProtected', value: input.passwordProtected }, { name: 'description', value: input.description }, { name: 'password', value: input.password }, { name: 'customerId', value: input.customerId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.customerAppFiles.customerAppFile.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/customer-app-files/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.currencies.currency

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.currencies.currency');

    nashServices.treasuryService.currencies.currency.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/currencies' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'description', value: input.description }, { name: 'iSOCode', value: input.iSOCode }, { name: 'code', value: input.code }, { name: 'symbol', value: input.symbol }, { name: 'currencyConversionMin', value: input.currencyConversionMin }, { name: 'currencyConversionMax', value: input.currencyConversionMax }, { name: 'conversionRateInUSDMin', value: input.conversionRateInUSDMin }, { name: 'conversionRateInUSDMax', value: input.conversionRateInUSDMax }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.currencies.currency.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/currencies/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.currencies.currency.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/currencies',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.currencies.currency.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/currencies/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.currencies.currency['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/currencies/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.currencies.currency.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/currencies/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'description', value: input.description }, { name: 'iSOCode', value: input.iSOCode }, { name: 'code', value: input.code }, { name: 'symbol', value: input.symbol }, { name: 'currencyConversionMin', value: input.currencyConversionMin }, { name: 'currencyConversionMax', value: input.currencyConversionMax }, { name: 'conversionRateInUSDMin', value: input.conversionRateInUSDMin }, { name: 'conversionRateInUSDMax', value: input.conversionRateInUSDMax }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.currencies.currency.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/currencies/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.creditNotes.creditNote

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.creditNotes.creditNote');

    nashServices.treasuryService.creditNotes.creditNote.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/credit-notes' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'documentNo', value: input.documentNo }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'notes', value: input.notes }, { name: 'approvedOn', value: input.approvedOn }, { name: 'invoiceId', value: input.invoiceId }, { name: 'partyId', value: input.partyId }, { name: 'customerId', value: input.customerId }, { name: 'businessId', value: input.businessId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.creditNotes.creditNote.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/credit-notes/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.creditNotes.creditNote.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/credit-notes/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.creditNotes.creditNote.getInvoiceLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/credit-notes/invoice-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.creditNotes.creditNote.getPartyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/credit-notes/party-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.creditNotes.creditNote.getCustomerLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/credit-notes/customer-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.creditNotes.creditNote.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/credit-notes/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.creditNotes.creditNote.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/credit-notes',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.creditNotes.creditNote.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/credit-notes/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.creditNotes.creditNote['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/credit-notes/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.creditNotes.creditNote.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/credit-notes/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'documentNo', value: input.documentNo }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'notes', value: input.notes }, { name: 'approvedOn', value: input.approvedOn }, { name: 'invoiceId', value: input.invoiceId }, { name: 'partyId', value: input.partyId }, { name: 'customerId', value: input.customerId }, { name: 'businessId', value: input.businessId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.creditNotes.creditNote.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/credit-notes/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.countryFlags.countryFlag

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.countryFlags.countryFlag');

    nashServices.treasuryService.countryFlags.countryFlag.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/country-flags' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'flagName', value: input.flagName }, { name: 'fileName', value: input.fileName }, { name: 'fileExtension', value: input.fileExtension }, { name: 'countryId', value: input.countryId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.countryFlags.countryFlag.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/country-flags/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.countryFlags.countryFlag.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/country-flags/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.countryFlags.countryFlag.getCountryLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/country-flags/country-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.countryFlags.countryFlag.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/country-flags',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.countryFlags.countryFlag.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/country-flags/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.countryFlags.countryFlag['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/country-flags/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.countryFlags.countryFlag.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/country-flags/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'flagName', value: input.flagName }, { name: 'fileName', value: input.fileName }, { name: 'fileExtension', value: input.fileExtension }, { name: 'countryId', value: input.countryId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.countryFlags.countryFlag.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/country-flags/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.countries.country

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.countries.country');

    nashServices.treasuryService.countries.country.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/countries' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'commonName', value: input.commonName }, { name: 'officialName', value: input.officialName }, { name: 'topLevelDomain', value: input.topLevelDomain }, { name: 'iSOCodeAlpha2', value: input.iSOCodeAlpha2 }, { name: 'iSOCodeNumeric3', value: input.iSOCodeNumeric3 }, { name: 'iSOCodeAlpha3', value: input.iSOCodeAlpha3 }, { name: 'codeIOC', value: input.codeIOC }, { name: 'independent', value: input.independent }, { name: 'assignmentStatus', value: input.assignmentStatus }, { name: 'unitedNationsMember', value: input.unitedNationsMember }, { name: 'region', value: input.region }, { name: 'subRegion', value: input.subRegion }, { name: 'landLocked', value: input.landLocked }, { name: 'areaMin', value: input.areaMin }, { name: 'areaMax', value: input.areaMax }, { name: 'flag', value: input.flag }, { name: 'autoConnectPending', value: input.autoConnectPending }, { name: 'hasManualConnect', value: input.hasManualConnect }, { name: 'orderRankMin', value: input.orderRankMin }, { name: 'orderRankMax', value: input.orderRankMax }, { name: 'countryCode', value: input.countryCode }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.countries.country.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/countries/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.countries.country.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/countries',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.countries.country.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/countries/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.countries.country['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/countries/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.countries.country.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/countries/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'commonName', value: input.commonName }, { name: 'officialName', value: input.officialName }, { name: 'topLevelDomain', value: input.topLevelDomain }, { name: 'iSOCodeAlpha2', value: input.iSOCodeAlpha2 }, { name: 'iSOCodeNumeric3', value: input.iSOCodeNumeric3 }, { name: 'iSOCodeAlpha3', value: input.iSOCodeAlpha3 }, { name: 'codeIOC', value: input.codeIOC }, { name: 'independent', value: input.independent }, { name: 'assignmentStatus', value: input.assignmentStatus }, { name: 'unitedNationsMember', value: input.unitedNationsMember }, { name: 'region', value: input.region }, { name: 'subRegion', value: input.subRegion }, { name: 'landLocked', value: input.landLocked }, { name: 'areaMin', value: input.areaMin }, { name: 'areaMax', value: input.areaMax }, { name: 'flag', value: input.flag }, { name: 'autoConnectPending', value: input.autoConnectPending }, { name: 'hasManualConnect', value: input.hasManualConnect }, { name: 'orderRankMin', value: input.orderRankMin }, { name: 'orderRankMax', value: input.orderRankMax }, { name: 'countryCode', value: input.countryCode }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.countries.country.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/countries/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.businessOwners.businessOwner

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.businessOwners.businessOwner');

    nashServices.treasuryService.businessOwners.businessOwner.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-owners' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'reference', value: input.reference }, { name: 'businessId', value: input.businessId }, { name: 'partyId', value: input.partyId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessOwners.businessOwner.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-owners/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessOwners.businessOwner.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-owners/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessOwners.businessOwner.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-owners/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessOwners.businessOwner.getPartyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-owners/party-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessOwners.businessOwner.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-owners',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.businessOwners.businessOwner.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-owners/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.businessOwners.businessOwner['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-owners/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.businessOwners.businessOwner.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-owners/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'reference', value: input.reference }, { name: 'businessId', value: input.businessId }, { name: 'partyId', value: input.partyId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessOwners.businessOwner.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-owners/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.businessExecutives.businessExecutive

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.businessExecutives.businessExecutive');

    nashServices.treasuryService.businessExecutives.businessExecutive.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-executives' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'reference', value: input.reference }, { name: 'businessId', value: input.businessId }, { name: 'partyId', value: input.partyId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessExecutives.businessExecutive.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-executives/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessExecutives.businessExecutive.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-executives/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessExecutives.businessExecutive.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-executives/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessExecutives.businessExecutive.getPartyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-executives/party-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessExecutives.businessExecutive.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-executives',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.businessExecutives.businessExecutive.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-executives/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.businessExecutives.businessExecutive['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-executives/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.businessExecutives.businessExecutive.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-executives/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'reference', value: input.reference }, { name: 'businessId', value: input.businessId }, { name: 'partyId', value: input.partyId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessExecutives.businessExecutive.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-executives/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.businesses.business

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.businesses.business');

    nashServices.treasuryService.businesses.business.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/businesses' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'legalName', value: input.legalName }, { name: 'nameOnCard', value: input.nameOnCard }, { name: 'businessRegistrationNo', value: input.businessRegistrationNo }, { name: 'businessDba', value: input.businessDba }, { name: 'website', value: input.website }, { name: 'phoneNo', value: input.phoneNo }, { name: 'dateEstablishedMin', value: input.dateEstablishedMin }, { name: 'dateEstablishedMax', value: input.dateEstablishedMax }, { name: 'stateOfIncorporation', value: input.stateOfIncorporation }, { name: 'businessDescription', value: input.businessDescription }, { name: 'applicationStageMin', value: input.applicationStageMin }, { name: 'applicationStageMax', value: input.applicationStageMax }, { name: 'email', value: input.email }, { name: 'currencyId', value: input.currencyId }, { name: 'invoiceApprovalDecisionId', value: input.invoiceApprovalDecisionId }, { name: 'invoicePendingDecisionId', value: input.invoicePendingDecisionId }, { name: 'invoiceRejectDecisionId', value: input.invoiceRejectDecisionId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businesses.business.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/businesses/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businesses.business.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/businesses/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businesses.business.getCurrencyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/businesses/currency-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businesses.business.getInvoiceApprovalDecisionLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/businesses/invoice-approval-decision-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businesses.business.getInvoicePendingDecisionLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/businesses/invoice-pending-decision-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businesses.business.getInvoiceRejectDecisionLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/businesses/invoice-reject-decision-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businesses.business.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/businesses',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.businesses.business.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/businesses/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.businesses.business['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/businesses/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.businesses.business.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/businesses/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'legalName', value: input.legalName }, { name: 'nameOnCard', value: input.nameOnCard }, { name: 'businessRegistrationNo', value: input.businessRegistrationNo }, { name: 'businessDba', value: input.businessDba }, { name: 'website', value: input.website }, { name: 'phoneNo', value: input.phoneNo }, { name: 'dateEstablishedMin', value: input.dateEstablishedMin }, { name: 'dateEstablishedMax', value: input.dateEstablishedMax }, { name: 'stateOfIncorporation', value: input.stateOfIncorporation }, { name: 'businessDescription', value: input.businessDescription }, { name: 'applicationStageMin', value: input.applicationStageMin }, { name: 'applicationStageMax', value: input.applicationStageMax }, { name: 'email', value: input.email }, { name: 'currencyId', value: input.currencyId }, { name: 'invoiceApprovalDecisionId', value: input.invoiceApprovalDecisionId }, { name: 'invoicePendingDecisionId', value: input.invoicePendingDecisionId }, { name: 'invoiceRejectDecisionId', value: input.invoiceRejectDecisionId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businesses.business.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/businesses/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.businessErps.businessErp

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.businessErps.businessErp');

    nashServices.treasuryService.businessErps.businessErp.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-erps' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'erpClientId', value: input.erpClientId }, { name: 'erpClientSecret', value: input.erpClientSecret }, { name: 'erpUrl', value: input.erpUrl }, { name: 'isTest', value: input.isTest }, { name: 'callbackUrl', value: input.callbackUrl }, { name: 'authenticateUrl', value: input.authenticateUrl }, { name: 'active', value: input.active }, { name: 'dateLinkedMin', value: input.dateLinkedMin }, { name: 'dateLinkedMax', value: input.dateLinkedMax }, { name: 'paymentsErpAccountId', value: input.paymentsErpAccountId }, { name: 'database', value: input.database }, { name: 'url', value: input.url }, { name: 'lastInvoiceSyncDate', value: input.lastInvoiceSyncDate }, { name: 'lastBillSyncDate', value: input.lastBillSyncDate }, { name: 'lastVendorsSyncDate', value: input.lastVendorsSyncDate }, { name: 'lastCustomersSyncDate', value: input.lastCustomersSyncDate }, { name: 'lastItemsSyncDate', value: input.lastItemsSyncDate }, { name: 'lastLedgersSyncDate', value: input.lastLedgersSyncDate }, { name: 'lastTransactionsSyncDate', value: input.lastTransactionsSyncDate }, { name: 'invoiceAccountsLinked', value: input.invoiceAccountsLinked }, { name: 'nonLinkedErp', value: input.nonLinkedErp }, { name: 'status', value: input.status }, { name: 'eRPCustomersMin', value: input.eRPCustomersMin }, { name: 'eRPCustomersMax', value: input.eRPCustomersMax }, { name: 'eRPVendorsMin', value: input.eRPVendorsMin }, { name: 'eRPVendorsMax', value: input.eRPVendorsMax }, { name: 'eRPInvoicesMin', value: input.eRPInvoicesMin }, { name: 'eRPInvoicesMax', value: input.eRPInvoicesMax }, { name: 'eRPBillsMin', value: input.eRPBillsMin }, { name: 'eRPBillsMax', value: input.eRPBillsMax }, { name: 'eRPItemsMin', value: input.eRPItemsMin }, { name: 'eRPItemsMax', value: input.eRPItemsMax }, { name: 'eRPTransactionMin', value: input.eRPTransactionMin }, { name: 'eRPTransactionMax', value: input.eRPTransactionMax }, { name: 'eRPChartOfAccountsMin', value: input.eRPChartOfAccountsMin }, { name: 'eRPChartOfAccountsMax', value: input.eRPChartOfAccountsMax }, { name: 'eRPChartOfAccountsTransactionsMin', value: input.eRPChartOfAccountsTransactionsMin }, { name: 'eRPChartOfAccountsTransactionsMax', value: input.eRPChartOfAccountsTransactionsMax }, { name: 'businessId', value: input.businessId }, { name: 'eRPId', value: input.eRPId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessErps.businessErp.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-erps/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessErps.businessErp.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-erps/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessErps.businessErp.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-erps/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessErps.businessErp.getERPLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-erps/e-rP-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessErps.businessErp.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-erps',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.businessErps.businessErp.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-erps/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.businessErps.businessErp['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-erps/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.businessErps.businessErp.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-erps/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'erpClientId', value: input.erpClientId }, { name: 'erpClientSecret', value: input.erpClientSecret }, { name: 'erpUrl', value: input.erpUrl }, { name: 'isTest', value: input.isTest }, { name: 'callbackUrl', value: input.callbackUrl }, { name: 'authenticateUrl', value: input.authenticateUrl }, { name: 'active', value: input.active }, { name: 'dateLinkedMin', value: input.dateLinkedMin }, { name: 'dateLinkedMax', value: input.dateLinkedMax }, { name: 'paymentsErpAccountId', value: input.paymentsErpAccountId }, { name: 'database', value: input.database }, { name: 'url', value: input.url }, { name: 'lastInvoiceSyncDate', value: input.lastInvoiceSyncDate }, { name: 'lastBillSyncDate', value: input.lastBillSyncDate }, { name: 'lastVendorsSyncDate', value: input.lastVendorsSyncDate }, { name: 'lastCustomersSyncDate', value: input.lastCustomersSyncDate }, { name: 'lastItemsSyncDate', value: input.lastItemsSyncDate }, { name: 'lastLedgersSyncDate', value: input.lastLedgersSyncDate }, { name: 'lastTransactionsSyncDate', value: input.lastTransactionsSyncDate }, { name: 'invoiceAccountsLinked', value: input.invoiceAccountsLinked }, { name: 'nonLinkedErp', value: input.nonLinkedErp }, { name: 'status', value: input.status }, { name: 'eRPCustomersMin', value: input.eRPCustomersMin }, { name: 'eRPCustomersMax', value: input.eRPCustomersMax }, { name: 'eRPVendorsMin', value: input.eRPVendorsMin }, { name: 'eRPVendorsMax', value: input.eRPVendorsMax }, { name: 'eRPInvoicesMin', value: input.eRPInvoicesMin }, { name: 'eRPInvoicesMax', value: input.eRPInvoicesMax }, { name: 'eRPBillsMin', value: input.eRPBillsMin }, { name: 'eRPBillsMax', value: input.eRPBillsMax }, { name: 'eRPItemsMin', value: input.eRPItemsMin }, { name: 'eRPItemsMax', value: input.eRPItemsMax }, { name: 'eRPTransactionMin', value: input.eRPTransactionMin }, { name: 'eRPTransactionMax', value: input.eRPTransactionMax }, { name: 'eRPChartOfAccountsMin', value: input.eRPChartOfAccountsMin }, { name: 'eRPChartOfAccountsMax', value: input.eRPChartOfAccountsMax }, { name: 'eRPChartOfAccountsTransactionsMin', value: input.eRPChartOfAccountsTransactionsMin }, { name: 'eRPChartOfAccountsTransactionsMax', value: input.eRPChartOfAccountsTransactionsMax }, { name: 'businessId', value: input.businessId }, { name: 'eRPId', value: input.eRPId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessErps.businessErp.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-erps/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.businessErpLinkedAccounts.businessErpLinkedAccount

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.businessErpLinkedAccounts.businessErpLinkedAccount');

    nashServices.treasuryService.businessErpLinkedAccounts.businessErpLinkedAccount.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-erp-linked-accounts' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'accountId', value: input.accountId }, { name: 'accountName', value: input.accountName }, { name: 'accountNo', value: input.accountNo }, { name: 'nashSyncLedgerId', value: input.nashSyncLedgerId }, { name: 'synced', value: input.synced }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessErpLinkedAccounts.businessErpLinkedAccount.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-erp-linked-accounts/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessErpLinkedAccounts.businessErpLinkedAccount.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-erp-linked-accounts',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.businessErpLinkedAccounts.businessErpLinkedAccount.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-erp-linked-accounts/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.businessErpLinkedAccounts.businessErpLinkedAccount['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-erp-linked-accounts/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.businessErpLinkedAccounts.businessErpLinkedAccount.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-erp-linked-accounts/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'accountId', value: input.accountId }, { name: 'accountName', value: input.accountName }, { name: 'accountNo', value: input.accountNo }, { name: 'nashSyncLedgerId', value: input.nashSyncLedgerId }, { name: 'synced', value: input.synced }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessErpLinkedAccounts.businessErpLinkedAccount.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-erp-linked-accounts/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.businessBankLinkRequests.businessBankLinkRequest

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.businessBankLinkRequests.businessBankLinkRequest');

    nashServices.treasuryService.businessBankLinkRequests.businessBankLinkRequest.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-bank-link-requests' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'providerIdMin', value: input.providerIdMin }, { name: 'providerIdMax', value: input.providerIdMax }, { name: 'businessId', value: input.businessId }, { name: 'countryId', value: input.countryId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessBankLinkRequests.businessBankLinkRequest.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-bank-link-requests/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessBankLinkRequests.businessBankLinkRequest.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-bank-link-requests/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessBankLinkRequests.businessBankLinkRequest.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-bank-link-requests/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessBankLinkRequests.businessBankLinkRequest.getCountryLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-bank-link-requests/country-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessBankLinkRequests.businessBankLinkRequest.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-bank-link-requests',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.businessBankLinkRequests.businessBankLinkRequest.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-bank-link-requests/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.businessBankLinkRequests.businessBankLinkRequest['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-bank-link-requests/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.businessBankLinkRequests.businessBankLinkRequest.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-bank-link-requests/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'providerIdMin', value: input.providerIdMin }, { name: 'providerIdMax', value: input.providerIdMax }, { name: 'businessId', value: input.businessId }, { name: 'countryId', value: input.countryId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessBankLinkRequests.businessBankLinkRequest.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-bank-link-requests/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.businessAccountHolders.businessAccountHolder

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.businessAccountHolders.businessAccountHolder');

    nashServices.treasuryService.businessAccountHolders.businessAccountHolder.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-account-holders' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'reference', value: input.reference }, { name: 'businessId', value: input.businessId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessAccountHolders.businessAccountHolder.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-account-holders/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessAccountHolders.businessAccountHolder.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-account-holders/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessAccountHolders.businessAccountHolder.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-account-holders/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessAccountHolders.businessAccountHolder.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-account-holders',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.businessAccountHolders.businessAccountHolder.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-account-holders/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.businessAccountHolders.businessAccountHolder['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-account-holders/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.businessAccountHolders.businessAccountHolder.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-account-holders/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'reference', value: input.reference }, { name: 'businessId', value: input.businessId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.businessAccountHolders.businessAccountHolder.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/business-account-holders/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.branches.branch

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.branches.branch');

    nashServices.treasuryService.branches.branch.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/branches' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'code', value: input.code }, { name: 'swiftCode', value: input.swiftCode }, { name: 'description', value: input.description }, { name: 'bankId', value: input.bankId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.branches.branch.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/branches/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.branches.branch.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/branches/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.branches.branch.getBankLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/branches/bank-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.branches.branch.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/branches',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.branches.branch.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/branches/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.branches.branch['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/branches/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.branches.branch.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/branches/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'code', value: input.code }, { name: 'swiftCode', value: input.swiftCode }, { name: 'description', value: input.description }, { name: 'bankId', value: input.bankId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.branches.branch.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/branches/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.bills.bill

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.bills.bill');

    nashServices.treasuryService.bills.bill.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bills' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'amountPaidMin', value: input.amountPaidMin }, { name: 'amountPaidMax', value: input.amountPaidMax }, { name: 'billHeader', value: input.billHeader }, { name: 'description', value: input.description }, { name: 'dueDateMin', value: input.dueDateMin }, { name: 'dueDateMax', value: input.dueDateMax }, { name: 'billDateMin', value: input.billDateMin }, { name: 'billDateMax', value: input.billDateMax }, { name: 'reconcileDateMin', value: input.reconcileDateMin }, { name: 'reconcileDateMax', value: input.reconcileDateMax }, { name: 'clearanceDateMin', value: input.clearanceDateMin }, { name: 'clearanceDateMax', value: input.clearanceDateMax }, { name: 'lastReceivedMin', value: input.lastReceivedMin }, { name: 'lastReceivedMax', value: input.lastReceivedMax }, { name: 'viewCountMin', value: input.viewCountMin }, { name: 'viewCountMax', value: input.viewCountMax }, { name: 'lastRemainderReceivedMin', value: input.lastRemainderReceivedMin }, { name: 'lastRemainderReceivedMax', value: input.lastRemainderReceivedMax }, { name: 'billStatusMin', value: input.billStatusMin }, { name: 'billStatusMax', value: input.billStatusMax }, { name: 'notes', value: input.notes }, { name: 'synced', value: input.synced }, { name: 'datePaidMin', value: input.datePaidMin }, { name: 'datePaidMax', value: input.datePaidMax }, { name: 'syncedDateMin', value: input.syncedDateMin }, { name: 'syncedDateMax', value: input.syncedDateMax }, { name: 'billNumber', value: input.billNumber }, { name: 'originSystemId', value: input.originSystemId }, { name: 'currencyId', value: input.currencyId }, { name: 'businessId', value: input.businessId }, { name: 'virtualAccountId', value: input.virtualAccountId }, { name: 'globalAccountId', value: input.globalAccountId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bills.bill.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bills/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bills.bill.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bills/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bills.bill.getOriginSystemLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bills/origin-system-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bills.bill.getCurrencyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bills/currency-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bills.bill.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bills/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bills.bill.getVirtualAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bills/virtual-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bills.bill.getGlobalAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bills/global-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bills.bill.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bills',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.bills.bill.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bills/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.bills.bill['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bills/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.bills.bill.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bills/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'amountPaidMin', value: input.amountPaidMin }, { name: 'amountPaidMax', value: input.amountPaidMax }, { name: 'billHeader', value: input.billHeader }, { name: 'description', value: input.description }, { name: 'dueDateMin', value: input.dueDateMin }, { name: 'dueDateMax', value: input.dueDateMax }, { name: 'billDateMin', value: input.billDateMin }, { name: 'billDateMax', value: input.billDateMax }, { name: 'reconcileDateMin', value: input.reconcileDateMin }, { name: 'reconcileDateMax', value: input.reconcileDateMax }, { name: 'clearanceDateMin', value: input.clearanceDateMin }, { name: 'clearanceDateMax', value: input.clearanceDateMax }, { name: 'lastReceivedMin', value: input.lastReceivedMin }, { name: 'lastReceivedMax', value: input.lastReceivedMax }, { name: 'viewCountMin', value: input.viewCountMin }, { name: 'viewCountMax', value: input.viewCountMax }, { name: 'lastRemainderReceivedMin', value: input.lastRemainderReceivedMin }, { name: 'lastRemainderReceivedMax', value: input.lastRemainderReceivedMax }, { name: 'billStatusMin', value: input.billStatusMin }, { name: 'billStatusMax', value: input.billStatusMax }, { name: 'notes', value: input.notes }, { name: 'synced', value: input.synced }, { name: 'datePaidMin', value: input.datePaidMin }, { name: 'datePaidMax', value: input.datePaidMax }, { name: 'syncedDateMin', value: input.syncedDateMin }, { name: 'syncedDateMax', value: input.syncedDateMax }, { name: 'billNumber', value: input.billNumber }, { name: 'originSystemId', value: input.originSystemId }, { name: 'currencyId', value: input.currencyId }, { name: 'businessId', value: input.businessId }, { name: 'virtualAccountId', value: input.virtualAccountId }, { name: 'globalAccountId', value: input.globalAccountId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bills.bill.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bills/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.billRejectDecisions.billRejectDecision

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.billRejectDecisions.billRejectDecision');

    nashServices.treasuryService.billRejectDecisions.billRejectDecision.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-reject-decisions' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'rejectionNotes', value: input.rejectionNotes }, { name: 'requesterId', value: input.requesterId }, { name: 'requesterNotes', value: input.requesterNotes }, { name: 'rejectorId', value: input.rejectorId }, { name: 'billId', value: input.billId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billRejectDecisions.billRejectDecision.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-reject-decisions/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billRejectDecisions.billRejectDecision.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-reject-decisions/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billRejectDecisions.billRejectDecision.getBillLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-reject-decisions/bill-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billRejectDecisions.billRejectDecision.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-reject-decisions',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.billRejectDecisions.billRejectDecision.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-reject-decisions/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.billRejectDecisions.billRejectDecision['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-reject-decisions/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.billRejectDecisions.billRejectDecision.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-reject-decisions/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'rejectionNotes', value: input.rejectionNotes }, { name: 'requesterId', value: input.requesterId }, { name: 'requesterNotes', value: input.requesterNotes }, { name: 'rejectorId', value: input.rejectorId }, { name: 'billId', value: input.billId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billRejectDecisions.billRejectDecision.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-reject-decisions/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.billPendingDecisions.billPendingDecision

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.billPendingDecisions.billPendingDecision');

    nashServices.treasuryService.billPendingDecisions.billPendingDecision.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-pending-decisions' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'approverId', value: input.approverId }, { name: 'requesterId', value: input.requesterId }, { name: 'requesterComments', value: input.requesterComments }, { name: 'billId', value: input.billId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billPendingDecisions.billPendingDecision.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-pending-decisions/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billPendingDecisions.billPendingDecision.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-pending-decisions/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billPendingDecisions.billPendingDecision.getBillLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-pending-decisions/bill-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billPendingDecisions.billPendingDecision.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-pending-decisions',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.billPendingDecisions.billPendingDecision.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-pending-decisions/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.billPendingDecisions.billPendingDecision['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-pending-decisions/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.billPendingDecisions.billPendingDecision.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-pending-decisions/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'approverId', value: input.approverId }, { name: 'requesterId', value: input.requesterId }, { name: 'requesterComments', value: input.requesterComments }, { name: 'billId', value: input.billId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billPendingDecisions.billPendingDecision.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-pending-decisions/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.billers.biller

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.billers.biller');

    nashServices.treasuryService.billers.biller.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/billers' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'email', value: input.email }, { name: 'accountNumber', value: input.accountNumber }, { name: 'phoneNumber', value: input.phoneNumber }, { name: 'billerType', value: input.billerType }, { name: 'contactPersonName', value: input.contactPersonName }, { name: 'lastPaymentDateMin', value: input.lastPaymentDateMin }, { name: 'lastPaymentDateMax', value: input.lastPaymentDateMax }, { name: 'businessId', value: input.businessId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billers.biller.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/billers/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billers.biller.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/billers/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billers.biller.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/billers/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billers.biller.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/billers',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.billers.biller.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/billers/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.billers.biller['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/billers/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.billers.biller.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/billers/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'email', value: input.email }, { name: 'accountNumber', value: input.accountNumber }, { name: 'phoneNumber', value: input.phoneNumber }, { name: 'billerType', value: input.billerType }, { name: 'contactPersonName', value: input.contactPersonName }, { name: 'lastPaymentDateMin', value: input.lastPaymentDateMin }, { name: 'lastPaymentDateMax', value: input.lastPaymentDateMax }, { name: 'businessId', value: input.businessId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billers.biller.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/billers/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.billApprovalDecisions.billApprovalDecision

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.billApprovalDecisions.billApprovalDecision');

    nashServices.treasuryService.billApprovalDecisions.billApprovalDecision.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-approval-decisions' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'approverId', value: input.approverId }, { name: 'requesterId', value: input.requesterId }, { name: 'approverNotes', value: input.approverNotes }, { name: 'requesterComments', value: input.requesterComments }, { name: 'billId', value: input.billId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billApprovalDecisions.billApprovalDecision.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-approval-decisions/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billApprovalDecisions.billApprovalDecision.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-approval-decisions/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billApprovalDecisions.billApprovalDecision.getBillLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-approval-decisions/bill-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billApprovalDecisions.billApprovalDecision.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-approval-decisions',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.billApprovalDecisions.billApprovalDecision.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-approval-decisions/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.billApprovalDecisions.billApprovalDecision['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-approval-decisions/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.billApprovalDecisions.billApprovalDecision.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-approval-decisions/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'approverId', value: input.approverId }, { name: 'requesterId', value: input.requesterId }, { name: 'approverNotes', value: input.approverNotes }, { name: 'requesterComments', value: input.requesterComments }, { name: 'billId', value: input.billId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billApprovalDecisions.billApprovalDecision.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-approval-decisions/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.billAppFiles.billAppFile

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.billAppFiles.billAppFile');

    nashServices.treasuryService.billAppFiles.billAppFile.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-app-files' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'fileName', value: input.fileName }, { name: 'fileExtension', value: input.fileExtension }, { name: 'passwordProtected', value: input.passwordProtected }, { name: 'description', value: input.description }, { name: 'password', value: input.password }, { name: 'billId', value: input.billId }, { name: 'debitNoteId', value: input.debitNoteId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billAppFiles.billAppFile.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-app-files/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billAppFiles.billAppFile.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-app-files/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billAppFiles.billAppFile.getBillLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-app-files/bill-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billAppFiles.billAppFile.getDebitNoteLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-app-files/debit-note-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billAppFiles.billAppFile.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-app-files',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.billAppFiles.billAppFile.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-app-files/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.billAppFiles.billAppFile['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-app-files/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.billAppFiles.billAppFile.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-app-files/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'fileName', value: input.fileName }, { name: 'fileExtension', value: input.fileExtension }, { name: 'passwordProtected', value: input.passwordProtected }, { name: 'description', value: input.description }, { name: 'password', value: input.password }, { name: 'billId', value: input.billId }, { name: 'debitNoteId', value: input.debitNoteId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.billAppFiles.billAppFile.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bill-app-files/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.beneficiaries.beneficiary

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.beneficiaries.beneficiary');

    nashServices.treasuryService.beneficiaries.beneficiary.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/beneficiaries' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'phoneNo', value: input.phoneNo }, { name: 'emailAddress', value: input.emailAddress }, { name: 'userId', value: input.userId }, { name: 'firstName', value: input.firstName }, { name: 'middleName', value: input.middleName }, { name: 'surname', value: input.surname }, { name: 'bankAccountNumber', value: input.bankAccountNumber }, { name: 'bankAccountName', value: input.bankAccountName }, { name: 'businessId', value: input.businessId }, { name: 'bankId', value: input.bankId }, { name: 'branchId', value: input.branchId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.beneficiaries.beneficiary.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/beneficiaries/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.beneficiaries.beneficiary.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/beneficiaries/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.beneficiaries.beneficiary.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/beneficiaries/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.beneficiaries.beneficiary.getBankLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/beneficiaries/bank-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.beneficiaries.beneficiary.getBranchLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/beneficiaries/branch-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.beneficiaries.beneficiary.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/beneficiaries',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.beneficiaries.beneficiary.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/beneficiaries/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.beneficiaries.beneficiary['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/beneficiaries/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.beneficiaries.beneficiary.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/beneficiaries/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'phoneNo', value: input.phoneNo }, { name: 'emailAddress', value: input.emailAddress }, { name: 'userId', value: input.userId }, { name: 'firstName', value: input.firstName }, { name: 'middleName', value: input.middleName }, { name: 'surname', value: input.surname }, { name: 'bankAccountNumber', value: input.bankAccountNumber }, { name: 'bankAccountName', value: input.bankAccountName }, { name: 'businessId', value: input.businessId }, { name: 'bankId', value: input.bankId }, { name: 'branchId', value: input.branchId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.beneficiaries.beneficiary.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/beneficiaries/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.bankStatmentTransactions.bankStatmentTransaction

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.bankStatmentTransactions.bankStatmentTransaction');

    nashServices.treasuryService.bankStatmentTransactions.bankStatmentTransaction.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statment-transactions' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'dateMin', value: input.dateMin }, { name: 'dateMax', value: input.dateMax }, { name: 'description', value: input.description }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'reference', value: input.reference }, { name: 'transactionCode', value: input.transactionCode }, { name: 'mobileNo', value: input.mobileNo }, { name: 'customerName', value: input.customerName }, { name: 'runningBalanceMin', value: input.runningBalanceMin }, { name: 'runningBalanceMax', value: input.runningBalanceMax }, { name: 'isReconciled', value: input.isReconciled }, { name: 'reconciledDateMin', value: input.reconciledDateMin }, { name: 'reconciledDateMax', value: input.reconciledDateMax }, { name: 'bankAccountNo', value: input.bankAccountNo }, { name: 'hash', value: input.hash }, { name: 'transactionType', value: input.transactionType }, { name: 'currencyId', value: input.currencyId }, { name: 'linkedAccountId', value: input.linkedAccountId }, { name: 'businessId', value: input.businessId }, { name: 'bankId', value: input.bankId }, { name: 'branchId', value: input.branchId }, { name: 'bankStatementId', value: input.bankStatementId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bankStatmentTransactions.bankStatmentTransaction.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statment-transactions/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bankStatmentTransactions.bankStatmentTransaction.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statment-transactions/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bankStatmentTransactions.bankStatmentTransaction.getCurrencyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statment-transactions/currency-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bankStatmentTransactions.bankStatmentTransaction.getLinkedAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statment-transactions/linked-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bankStatmentTransactions.bankStatmentTransaction.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statment-transactions/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bankStatmentTransactions.bankStatmentTransaction.getBankLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statment-transactions/bank-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bankStatmentTransactions.bankStatmentTransaction.getBranchLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statment-transactions/branch-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bankStatmentTransactions.bankStatmentTransaction.getBankStatementLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statment-transactions/bank-statement-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bankStatmentTransactions.bankStatmentTransaction.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statment-transactions',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.bankStatmentTransactions.bankStatmentTransaction.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statment-transactions/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.bankStatmentTransactions.bankStatmentTransaction['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statment-transactions/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.bankStatmentTransactions.bankStatmentTransaction.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statment-transactions/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'dateMin', value: input.dateMin }, { name: 'dateMax', value: input.dateMax }, { name: 'description', value: input.description }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'reference', value: input.reference }, { name: 'transactionCode', value: input.transactionCode }, { name: 'mobileNo', value: input.mobileNo }, { name: 'customerName', value: input.customerName }, { name: 'runningBalanceMin', value: input.runningBalanceMin }, { name: 'runningBalanceMax', value: input.runningBalanceMax }, { name: 'isReconciled', value: input.isReconciled }, { name: 'reconciledDateMin', value: input.reconciledDateMin }, { name: 'reconciledDateMax', value: input.reconciledDateMax }, { name: 'bankAccountNo', value: input.bankAccountNo }, { name: 'hash', value: input.hash }, { name: 'transactionType', value: input.transactionType }, { name: 'currencyId', value: input.currencyId }, { name: 'linkedAccountId', value: input.linkedAccountId }, { name: 'businessId', value: input.businessId }, { name: 'bankId', value: input.bankId }, { name: 'branchId', value: input.branchId }, { name: 'bankStatementId', value: input.bankStatementId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bankStatmentTransactions.bankStatmentTransaction.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statment-transactions/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.bankStatements.bankStatement

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.bankStatements.bankStatement');

    nashServices.treasuryService.bankStatements.bankStatement.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statements' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'statementDateMin', value: input.statementDateMin }, { name: 'statementDateMax', value: input.statementDateMax }, { name: 'reference', value: input.reference }, { name: 'businessId', value: input.businessId }, { name: 'linkedAccountId', value: input.linkedAccountId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bankStatements.bankStatement.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statements/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bankStatements.bankStatement.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statements/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bankStatements.bankStatement.getBusinessLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statements/business-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bankStatements.bankStatement.getLinkedAccountLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statements/linked-account-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bankStatements.bankStatement.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statements',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.bankStatements.bankStatement.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statements/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.bankStatements.bankStatement['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statements/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.bankStatements.bankStatement.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statements/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'statementDateMin', value: input.statementDateMin }, { name: 'statementDateMax', value: input.statementDateMax }, { name: 'reference', value: input.reference }, { name: 'businessId', value: input.businessId }, { name: 'linkedAccountId', value: input.linkedAccountId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bankStatements.bankStatement.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-statements/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.banks.bank

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.banks.bank');

    nashServices.treasuryService.banks.bank.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/banks' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'bankCode', value: input.bankCode }, { name: 'isAutoLinked', value: input.isAutoLinked }, { name: 'slug', value: input.slug }, { name: 'tier', value: input.tier }, { name: 'bankType', value: input.bankType }, { name: 'nashCollectionsAccountNo', value: input.nashCollectionsAccountNo }, { name: 'nashCollectionsAccountName', value: input.nashCollectionsAccountName }, { name: 'nashDisbursementsAccountNo', value: input.nashDisbursementsAccountNo }, { name: 'nashDisbursementsAccountName', value: input.nashDisbursementsAccountName }, { name: 'manualPaymentInstructions', value: input.manualPaymentInstructions }, { name: 'hasB2B', value: input.hasB2B }, { name: 'hasIFT', value: input.hasIFT }, { name: 'hasEFT', value: input.hasEFT }, { name: 'hasRTGS', value: input.hasRTGS }, { name: 'hasSWIFT', value: input.hasSWIFT }, { name: 'hasPesaLinkToBank', value: input.hasPesaLinkToBank }, { name: 'hasPesaLinkToPhone', value: input.hasPesaLinkToPhone }, { name: 'hasBankToMpesa', value: input.hasBankToMpesa }, { name: 'hasMpesaToBank_C2B_STK', value: input.hasMpesaToBank_C2B_STK }, { name: 'hasTransactionStatus', value: input.hasTransactionStatus }, { name: 'hasIPN', value: input.hasIPN }, { name: 'canGetAccountBalance', value: input.canGetAccountBalance }, { name: 'canGetAccountMiniStatement', value: input.canGetAccountMiniStatement }, { name: 'canGetAccountFullStatement', value: input.canGetAccountFullStatement }, { name: 'canGetAccountTransaction', value: input.canGetAccountTransaction }, { name: 'canGetAccountValidation', value: input.canGetAccountValidation }, { name: 'description', value: input.description }, { name: 'defaultCurrencyId', value: input.defaultCurrencyId }, { name: 'countryId', value: input.countryId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.banks.bank.getWithNavigationProperties = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/banks/with-navigation-properties/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.banks.bank.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/banks/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.banks.bank.getCurrencyLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/banks/currency-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.banks.bank.getCountryLookup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/banks/country-lookup' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.banks.bank.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/banks',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.banks.bank.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/banks/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.banks.bank['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/banks/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.banks.bank.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/banks/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'name', value: input.name }, { name: 'bankCode', value: input.bankCode }, { name: 'isAutoLinked', value: input.isAutoLinked }, { name: 'slug', value: input.slug }, { name: 'tier', value: input.tier }, { name: 'bankType', value: input.bankType }, { name: 'nashCollectionsAccountNo', value: input.nashCollectionsAccountNo }, { name: 'nashCollectionsAccountName', value: input.nashCollectionsAccountName }, { name: 'nashDisbursementsAccountNo', value: input.nashDisbursementsAccountNo }, { name: 'nashDisbursementsAccountName', value: input.nashDisbursementsAccountName }, { name: 'manualPaymentInstructions', value: input.manualPaymentInstructions }, { name: 'hasB2B', value: input.hasB2B }, { name: 'hasIFT', value: input.hasIFT }, { name: 'hasEFT', value: input.hasEFT }, { name: 'hasRTGS', value: input.hasRTGS }, { name: 'hasSWIFT', value: input.hasSWIFT }, { name: 'hasPesaLinkToBank', value: input.hasPesaLinkToBank }, { name: 'hasPesaLinkToPhone', value: input.hasPesaLinkToPhone }, { name: 'hasBankToMpesa', value: input.hasBankToMpesa }, { name: 'hasMpesaToBank_C2B_STK', value: input.hasMpesaToBank_C2B_STK }, { name: 'hasTransactionStatus', value: input.hasTransactionStatus }, { name: 'hasIPN', value: input.hasIPN }, { name: 'canGetAccountBalance', value: input.canGetAccountBalance }, { name: 'canGetAccountMiniStatement', value: input.canGetAccountMiniStatement }, { name: 'canGetAccountFullStatement', value: input.canGetAccountFullStatement }, { name: 'canGetAccountTransaction', value: input.canGetAccountTransaction }, { name: 'canGetAccountValidation', value: input.canGetAccountValidation }, { name: 'description', value: input.description }, { name: 'defaultCurrencyId', value: input.defaultCurrencyId }, { name: 'countryId', value: input.countryId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.banks.bank.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/banks/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.bankGatewayRequests.bankGatewayRequest

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.bankGatewayRequests.bankGatewayRequest');

    nashServices.treasuryService.bankGatewayRequests.bankGatewayRequest.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-gateway-requests' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'bankSlug', value: input.bankSlug }, { name: 'bankTransactionIdentifier', value: input.bankTransactionIdentifier }, { name: 'bankIdMin', value: input.bankIdMin }, { name: 'bankIdMax', value: input.bankIdMax }, { name: 'sourceAccount', value: input.sourceAccount }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'currency', value: input.currency }, { name: 'description', value: input.description }, { name: 'referenceNo', value: input.referenceNo }, { name: 'destinationAccount', value: input.destinationAccount }, { name: 'deleted', value: input.deleted }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bankGatewayRequests.bankGatewayRequest.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-gateway-requests/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bankGatewayRequests.bankGatewayRequest.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-gateway-requests',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.bankGatewayRequests.bankGatewayRequest.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-gateway-requests/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.bankGatewayRequests.bankGatewayRequest['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-gateway-requests/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.bankGatewayRequests.bankGatewayRequest.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-gateway-requests/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'bankSlug', value: input.bankSlug }, { name: 'bankTransactionIdentifier', value: input.bankTransactionIdentifier }, { name: 'bankIdMin', value: input.bankIdMin }, { name: 'bankIdMax', value: input.bankIdMax }, { name: 'sourceAccount', value: input.sourceAccount }, { name: 'amountMin', value: input.amountMin }, { name: 'amountMax', value: input.amountMax }, { name: 'currency', value: input.currency }, { name: 'description', value: input.description }, { name: 'referenceNo', value: input.referenceNo }, { name: 'destinationAccount', value: input.destinationAccount }, { name: 'deleted', value: input.deleted }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bankGatewayRequests.bankGatewayRequest.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-gateway-requests/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.bankGatewayCallbacks.bankGatewayCallback

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.bankGatewayCallbacks.bankGatewayCallback');

    nashServices.treasuryService.bankGatewayCallbacks.bankGatewayCallback.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-gateway-callbacks' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'bankSlug', value: input.bankSlug }, { name: 'transactionID', value: input.transactionID }, { name: 'accountRef', value: input.accountRef }, { name: 'senderAccount', value: input.senderAccount }, { name: 'receiverAccount', value: input.receiverAccount }, { name: 'posted', value: input.posted }, { name: 'deleted', value: input.deleted }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bankGatewayCallbacks.bankGatewayCallback.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-gateway-callbacks/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bankGatewayCallbacks.bankGatewayCallback.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-gateway-callbacks',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.bankGatewayCallbacks.bankGatewayCallback.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-gateway-callbacks/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.bankGatewayCallbacks.bankGatewayCallback['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-gateway-callbacks/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.bankGatewayCallbacks.bankGatewayCallback.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-gateway-callbacks/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'bankSlug', value: input.bankSlug }, { name: 'transactionID', value: input.transactionID }, { name: 'accountRef', value: input.accountRef }, { name: 'senderAccount', value: input.senderAccount }, { name: 'receiverAccount', value: input.receiverAccount }, { name: 'posted', value: input.posted }, { name: 'deleted', value: input.deleted }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.bankGatewayCallbacks.bankGatewayCallback.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/bank-gateway-callbacks/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller nashServices.treasuryService.addresses.address

  (function(){

    abp.utils.createNamespace(window, 'nashServices.treasuryService.addresses.address');

    nashServices.treasuryService.addresses.address.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/addresses' + abp.utils.buildQueryString([{ name: 'filterText', value: input.filterText }, { name: 'street', value: input.street }, { name: 'officeNo', value: input.officeNo }, { name: 'city', value: input.city }, { name: 'countryName', value: input.countryName }, { name: 'countryRegion', value: input.countryRegion }, { name: 'zipCode', value: input.zipCode }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.addresses.address.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/addresses/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.addresses.address.create = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/addresses',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.addresses.address.update = function(id, input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/addresses/' + id + '',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    nashServices.treasuryService.addresses.address['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/addresses/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    nashServices.treasuryService.addresses.address.getListAsExcelFile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/addresses/as-excel-file' + abp.utils.buildQueryString([{ name: 'downloadToken', value: input.downloadToken }, { name: 'filterText', value: input.filterText }, { name: 'street', value: input.street }, { name: 'officeNo', value: input.officeNo }, { name: 'city', value: input.city }, { name: 'countryName', value: input.countryName }, { name: 'countryRegion', value: input.countryRegion }, { name: 'zipCode', value: input.zipCode }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    nashServices.treasuryService.addresses.address.getDownloadToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/treasury-service/addresses/download-token',
        type: 'GET'
      }, ajaxParams));
    };

  })();

})();


